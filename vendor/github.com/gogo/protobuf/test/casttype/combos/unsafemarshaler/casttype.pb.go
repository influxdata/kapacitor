// Code generated by protoc-gen-gogo.
// source: combos/unsafemarshaler/casttype.proto
// DO NOT EDIT!

/*
Package casttype is a generated protocol buffer package.

It is generated from these files:
	combos/unsafemarshaler/casttype.proto

It has these top-level messages:
	Castaway
	Wilson
*/
package casttype

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_test_casttype "github.com/gogo/protobuf/test/casttype"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Castaway struct {
	Int32Ptr         *int32                                                                                                      `protobuf:"varint,1,opt,name=Int32Ptr,json=int32Ptr,casttype=int32" json:"Int32Ptr,omitempty"`
	Int32            int32                                                                                                       `protobuf:"varint,2,opt,name=Int32,json=int32,casttype=int32" json:"Int32"`
	MyUint64Ptr      *github_com_gogo_protobuf_test_casttype.MyUint64Type                                                        `protobuf:"varint,3,opt,name=MyUint64Ptr,json=myUint64Ptr,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyUint64Ptr,omitempty"`
	MyUint64         github_com_gogo_protobuf_test_casttype.MyUint64Type                                                         `protobuf:"varint,4,opt,name=MyUint64,json=myUint64,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyUint64"`
	MyFloat32Ptr     *github_com_gogo_protobuf_test_casttype.MyFloat32Type                                                       `protobuf:"fixed32,5,opt,name=MyFloat32Ptr,json=myFloat32Ptr,casttype=github.com/gogo/protobuf/test/casttype.MyFloat32Type" json:"MyFloat32Ptr,omitempty"`
	MyFloat32        github_com_gogo_protobuf_test_casttype.MyFloat32Type                                                        `protobuf:"fixed32,6,opt,name=MyFloat32,json=myFloat32,casttype=github.com/gogo/protobuf/test/casttype.MyFloat32Type" json:"MyFloat32"`
	MyFloat64Ptr     *github_com_gogo_protobuf_test_casttype.MyFloat64Type                                                       `protobuf:"fixed64,7,opt,name=MyFloat64Ptr,json=myFloat64Ptr,casttype=github.com/gogo/protobuf/test/casttype.MyFloat64Type" json:"MyFloat64Ptr,omitempty"`
	MyFloat64        github_com_gogo_protobuf_test_casttype.MyFloat64Type                                                        `protobuf:"fixed64,8,opt,name=MyFloat64,json=myFloat64,casttype=github.com/gogo/protobuf/test/casttype.MyFloat64Type" json:"MyFloat64"`
	MyBytes          github_com_gogo_protobuf_test_casttype.Bytes                                                                `protobuf:"bytes,9,opt,name=MyBytes,json=myBytes,casttype=github.com/gogo/protobuf/test/casttype.Bytes" json:"MyBytes,omitempty"`
	NormalBytes      []byte                                                                                                      `protobuf:"bytes,10,opt,name=NormalBytes,json=normalBytes" json:"NormalBytes,omitempty"`
	MyUint64S        []github_com_gogo_protobuf_test_casttype.MyUint64Type                                                       `protobuf:"varint,11,rep,name=MyUint64s,json=myUint64s,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyUint64s,omitempty"`
	MyMap            github_com_gogo_protobuf_test_casttype.MyMapType                                                            `protobuf:"bytes,12,rep,name=MyMap,json=myMap,casttype=github.com/gogo/protobuf/test/casttype.MyMapType" json:"MyMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MyCustomMap      map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type `protobuf:"bytes,13,rep,name=MyCustomMap,json=myCustomMap,castkey=github.com/gogo/protobuf/test/casttype.MyStringType,castvalue=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyCustomMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MyNullableMap    map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson                                              `protobuf:"bytes,14,rep,name=MyNullableMap,json=myNullableMap,castkey=github.com/gogo/protobuf/test/casttype.MyInt32Type" json:"MyNullableMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MyEmbeddedMap    map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson                                               `protobuf:"bytes,15,rep,name=MyEmbeddedMap,json=myEmbeddedMap,castkey=github.com/gogo/protobuf/test/casttype.MyInt32Type" json:"MyEmbeddedMap" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte                                                                                                      `json:"-"`
}

func (m *Castaway) Reset()                    { *m = Castaway{} }
func (*Castaway) ProtoMessage()               {}
func (*Castaway) Descriptor() ([]byte, []int) { return fileDescriptorCasttype, []int{0} }

type Wilson struct {
	Int64            *int64 `protobuf:"varint,1,opt,name=Int64,json=int64" json:"Int64,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Wilson) Reset()                    { *m = Wilson{} }
func (*Wilson) ProtoMessage()               {}
func (*Wilson) Descriptor() ([]byte, []int) { return fileDescriptorCasttype, []int{1} }

func init() {
	proto.RegisterType((*Castaway)(nil), "casttype.Castaway")
	proto.RegisterType((*Wilson)(nil), "casttype.Wilson")
}
func (this *Castaway) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CasttypeDescription()
}
func (this *Wilson) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CasttypeDescription()
}
func CasttypeDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3848 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x5d, 0x6c, 0x1c, 0xd7,
		0x75, 0xe6, 0xec, 0x0f, 0xb9, 0x7b, 0x76, 0xb9, 0x1c, 0x5e, 0xd2, 0xf2, 0x8a, 0xb6, 0x97, 0x14,
		0x65, 0xd9, 0xb4, 0x9d, 0x50, 0x2e, 0x45, 0xd1, 0xf2, 0x2a, 0xb1, 0xc1, 0x25, 0x57, 0x0c, 0x05,
		0x2e, 0xc9, 0x0e, 0xc9, 0x58, 0x76, 0x0b, 0x0c, 0x2e, 0x67, 0x2f, 0x97, 0x23, 0xcd, 0xce, 0x6c,
		0x67, 0x66, 0x25, 0xaf, 0x9f, 0xd4, 0xb8, 0x6d, 0x90, 0x16, 0xfd, 0x2f, 0x50, 0xc7, 0x71, 0xd2,
		0x26, 0x40, 0xeb, 0x34, 0xfd, 0x4b, 0xda, 0xa6, 0x28, 0xfa, 0x14, 0xa0, 0x48, 0xeb, 0xa7, 0x22,
		0xed, 0x53, 0x1f, 0x0a, 0x39, 0x62, 0x0d, 0xd4, 0x69, 0xd3, 0xd6, 0x05, 0x0c, 0x34, 0x90, 0x5f,
		0x8a, 0xfb, 0x37, 0x3b, 0xfb, 0x43, 0xcd, 0x52, 0x41, 0x9a, 0x3e, 0x91, 0xf7, 0xdc, 0xf3, 0x7d,
		0x73, 0xee, 0xb9, 0xe7, 0x9e, 0x73, 0xe6, 0xee, 0xc0, 0xdf, 0xfc, 0x04, 0xcc, 0xd4, 0x1c, 0xa7,
		0x66, 0x91, 0xf3, 0x0d, 0xd7, 0xf1, 0x9d, 0xfd, 0xe6, 0xc1, 0xf9, 0x2a, 0xf1, 0x0c, 0xd7, 0x6c,
		0xf8, 0x8e, 0x3b, 0xcf, 0x64, 0x68, 0x8c, 0x6b, 0xcc, 0x4b, 0x8d, 0xd9, 0x0a, 0x8c, 0x5f, 0x31,
		0x2d, 0xb2, 0x1a, 0x28, 0xee, 0x10, 0x1f, 0x5d, 0x82, 0xc4, 0x81, 0x69, 0x91, 0xbc, 0x32, 0x13,
		0x9f, 0xcb, 0x2c, 0x3c, 0x3e, 0xdf, 0x05, 0x9a, 0xef, 0x44, 0x6c, 0x53, 0xb1, 0xc6, 0x10, 0xb3,
		0xef, 0x25, 0x60, 0xa2, 0xcf, 0x2c, 0x42, 0x90, 0xb0, 0x71, 0x9d, 0x32, 0x2a, 0x73, 0x69, 0x8d,
		0xfd, 0x8f, 0xf2, 0x30, 0xd2, 0xc0, 0xc6, 0x0d, 0x5c, 0x23, 0xf9, 0x18, 0x13, 0xcb, 0x21, 0x2a,
		0x00, 0x54, 0x49, 0x83, 0xd8, 0x55, 0x62, 0x1b, 0xad, 0x7c, 0x7c, 0x26, 0x3e, 0x97, 0xd6, 0x42,
		0x12, 0xf4, 0x0c, 0x8c, 0x37, 0x9a, 0xfb, 0x96, 0x69, 0xe8, 0x21, 0x35, 0x98, 0x89, 0xcf, 0x25,
		0x35, 0x95, 0x4f, 0xac, 0xb6, 0x95, 0x9f, 0x84, 0xb1, 0x5b, 0x04, 0xdf, 0x08, 0xab, 0x66, 0x98,
		0x6a, 0x8e, 0x8a, 0x43, 0x8a, 0x2b, 0x90, 0xad, 0x13, 0xcf, 0xc3, 0x35, 0xa2, 0xfb, 0xad, 0x06,
		0xc9, 0x27, 0xd8, 0xea, 0x67, 0x7a, 0x56, 0xdf, 0xbd, 0xf2, 0x8c, 0x40, 0xed, 0xb6, 0x1a, 0x04,
		0x2d, 0x43, 0x9a, 0xd8, 0xcd, 0x3a, 0x67, 0x48, 0x1e, 0xe3, 0xbf, 0xb2, 0xdd, 0xac, 0x77, 0xb3,
		0xa4, 0x28, 0x4c, 0x50, 0x8c, 0x78, 0xc4, 0xbd, 0x69, 0x1a, 0x24, 0x3f, 0xcc, 0x08, 0x9e, 0xec,
		0x21, 0xd8, 0xe1, 0xf3, 0xdd, 0x1c, 0x12, 0x87, 0x56, 0x20, 0x4d, 0x5e, 0xf5, 0x89, 0xed, 0x99,
		0x8e, 0x9d, 0x1f, 0x61, 0x24, 0xe7, 0xfa, 0xec, 0x22, 0xb1, 0xaa, 0xdd, 0x14, 0x6d, 0x1c, 0x5a,
		0x82, 0x11, 0xa7, 0xe1, 0x9b, 0x8e, 0xed, 0xe5, 0x53, 0x33, 0xca, 0x5c, 0x66, 0xe1, 0xd1, 0xbe,
		0x81, 0xb0, 0xc5, 0x75, 0x34, 0xa9, 0x8c, 0xd6, 0x41, 0xf5, 0x9c, 0xa6, 0x6b, 0x10, 0xdd, 0x70,
		0xaa, 0x44, 0x37, 0xed, 0x03, 0x27, 0x9f, 0x66, 0x04, 0xd3, 0xbd, 0x0b, 0x61, 0x8a, 0x2b, 0x4e,
		0x95, 0xac, 0xdb, 0x07, 0x8e, 0x96, 0xf3, 0x3a, 0xc6, 0xe8, 0x14, 0x0c, 0x7b, 0x2d, 0xdb, 0xc7,
		0xaf, 0xe6, 0xb3, 0x2c, 0x42, 0xc4, 0x68, 0xf6, 0x7f, 0x92, 0x30, 0x36, 0x48, 0x88, 0x5d, 0x86,
		0xe4, 0x01, 0x5d, 0x65, 0x3e, 0x76, 0x12, 0x1f, 0x70, 0x4c, 0xa7, 0x13, 0x87, 0x1f, 0xd0, 0x89,
		0xcb, 0x90, 0xb1, 0x89, 0xe7, 0x93, 0x2a, 0x8f, 0x88, 0xf8, 0x80, 0x31, 0x05, 0x1c, 0xd4, 0x1b,
		0x52, 0x89, 0x07, 0x0a, 0xa9, 0x6b, 0x30, 0x16, 0x98, 0xa4, 0xbb, 0xd8, 0xae, 0xc9, 0xd8, 0x3c,
		0x1f, 0x65, 0xc9, 0x7c, 0x59, 0xe2, 0x34, 0x0a, 0xd3, 0x72, 0xa4, 0x63, 0x8c, 0x56, 0x01, 0x1c,
		0x9b, 0x38, 0x07, 0x7a, 0x95, 0x18, 0x56, 0x3e, 0x75, 0x8c, 0x97, 0xb6, 0xa8, 0x4a, 0x8f, 0x97,
		0x1c, 0x2e, 0x35, 0x2c, 0xf4, 0x7c, 0x3b, 0xd4, 0x46, 0x8e, 0x89, 0x94, 0x0a, 0x3f, 0x64, 0x3d,
		0xd1, 0xb6, 0x07, 0x39, 0x97, 0xd0, 0xb8, 0x27, 0x55, 0xb1, 0xb2, 0x34, 0x33, 0x62, 0x3e, 0x72,
		0x65, 0x9a, 0x80, 0xf1, 0x85, 0x8d, 0xba, 0xe1, 0x21, 0x3a, 0x0b, 0x81, 0x40, 0x67, 0x61, 0x05,
		0x2c, 0x0b, 0x65, 0xa5, 0x70, 0x13, 0xd7, 0xc9, 0xd4, 0x25, 0xc8, 0x75, 0xba, 0x07, 0x4d, 0x42,
		0xd2, 0xf3, 0xb1, 0xeb, 0xb3, 0x28, 0x4c, 0x6a, 0x7c, 0x80, 0x54, 0x88, 0x13, 0xbb, 0xca, 0xb2,
		0x5c, 0x52, 0xa3, 0xff, 0x4e, 0x3d, 0x07, 0xa3, 0x1d, 0x8f, 0x1f, 0x14, 0x38, 0xfb, 0xc6, 0x30,
		0x4c, 0xf6, 0x8b, 0xb9, 0xbe, 0xe1, 0x7f, 0x0a, 0x86, 0xed, 0x66, 0x7d, 0x9f, 0xb8, 0xf9, 0x38,
		0x63, 0x10, 0x23, 0xb4, 0x0c, 0x49, 0x0b, 0xef, 0x13, 0x2b, 0x9f, 0x98, 0x51, 0xe6, 0x72, 0x0b,
		0xcf, 0x0c, 0x14, 0xd5, 0xf3, 0x1b, 0x14, 0xa2, 0x71, 0x24, 0x7a, 0x01, 0x12, 0x22, 0xc5, 0x51,
		0x86, 0xa7, 0x07, 0x63, 0xa0, 0xb1, 0xa8, 0x31, 0x1c, 0x7a, 0x04, 0xd2, 0xf4, 0x2f, 0xf7, 0xed,
		0x30, 0xb3, 0x39, 0x45, 0x05, 0xd4, 0xaf, 0x68, 0x0a, 0x52, 0x2c, 0xcc, 0xaa, 0x44, 0x96, 0x86,
		0x60, 0x4c, 0x37, 0xa6, 0x4a, 0x0e, 0x70, 0xd3, 0xf2, 0xf5, 0x9b, 0xd8, 0x6a, 0x12, 0x16, 0x30,
		0x69, 0x2d, 0x2b, 0x84, 0x9f, 0xa6, 0x32, 0x34, 0x0d, 0x19, 0x1e, 0x95, 0xa6, 0x5d, 0x25, 0xaf,
		0xb2, 0xec, 0x93, 0xd4, 0x78, 0xa0, 0xae, 0x53, 0x09, 0x7d, 0xfc, 0x75, 0xcf, 0xb1, 0xe5, 0xd6,
		0xb2, 0x47, 0x50, 0x01, 0x7b, 0xfc, 0x73, 0xdd, 0x89, 0xef, 0xb1, 0xfe, 0xcb, 0xeb, 0x8e, 0xc5,
		0xd9, 0xbf, 0x8c, 0x41, 0x82, 0x9d, 0xb7, 0x31, 0xc8, 0xec, 0xbe, 0xbc, 0x5d, 0xd6, 0x57, 0xb7,
		0xf6, 0x4a, 0x1b, 0x65, 0x55, 0x41, 0x39, 0x00, 0x26, 0xb8, 0xb2, 0xb1, 0xb5, 0xbc, 0xab, 0xc6,
		0x82, 0xf1, 0xfa, 0xe6, 0xee, 0xd2, 0xa2, 0x1a, 0x0f, 0x00, 0x7b, 0x5c, 0x90, 0x08, 0x2b, 0x5c,
		0x58, 0x50, 0x93, 0x48, 0x85, 0x2c, 0x27, 0x58, 0xbf, 0x56, 0x5e, 0x5d, 0x5a, 0x54, 0x87, 0x3b,
		0x25, 0x17, 0x16, 0xd4, 0x11, 0x34, 0x0a, 0x69, 0x26, 0x29, 0x6d, 0x6d, 0x6d, 0xa8, 0xa9, 0x80,
		0x73, 0x67, 0x57, 0x5b, 0xdf, 0x5c, 0x53, 0xd3, 0x01, 0xe7, 0x9a, 0xb6, 0xb5, 0xb7, 0xad, 0x42,
		0xc0, 0x50, 0x29, 0xef, 0xec, 0x2c, 0xaf, 0x95, 0xd5, 0x4c, 0xa0, 0x51, 0x7a, 0x79, 0xb7, 0xbc,
		0xa3, 0x66, 0x3b, 0xcc, 0xba, 0xb0, 0xa0, 0x8e, 0x06, 0x8f, 0x28, 0x6f, 0xee, 0x55, 0xd4, 0x1c,
		0x1a, 0x87, 0x51, 0xfe, 0x08, 0x69, 0xc4, 0x58, 0x97, 0x68, 0x69, 0x51, 0x55, 0xdb, 0x86, 0x70,
		0x96, 0xf1, 0x0e, 0xc1, 0xd2, 0xa2, 0x8a, 0x66, 0x57, 0x20, 0xc9, 0xa2, 0x0b, 0x21, 0xc8, 0x6d,
		0x2c, 0x97, 0xca, 0x1b, 0xfa, 0xd6, 0xf6, 0xee, 0xfa, 0xd6, 0xe6, 0xf2, 0x86, 0xaa, 0xb4, 0x65,
		0x5a, 0xf9, 0x27, 0xf7, 0xd6, 0xb5, 0xf2, 0xaa, 0x1a, 0x0b, 0xcb, 0xb6, 0xcb, 0xcb, 0xbb, 0xe5,
		0x55, 0x35, 0x3e, 0xfb, 0x34, 0x4c, 0xf6, 0xcb, 0x33, 0xfd, 0x4e, 0xc6, 0xec, 0x57, 0x14, 0x98,
		0xe8, 0x93, 0x32, 0xfb, 0x9e, 0xa2, 0x17, 0x21, 0xc9, 0x23, 0x8d, 0x17, 0x91, 0xa7, 0xfa, 0xe6,
		0x5e, 0x16, 0x77, 0x3d, 0x85, 0x84, 0xe1, 0xc2, 0x85, 0x34, 0x7e, 0x4c, 0x21, 0xa5, 0x14, 0x3d,
		0xe1, 0xf4, 0xba, 0x02, 0xf9, 0xe3, 0xb8, 0x23, 0xce, 0x7b, 0xac, 0xe3, 0xbc, 0x5f, 0xee, 0x36,
		0xe0, 0xcc, 0xf1, 0x6b, 0xe8, 0xb1, 0xe2, 0x6d, 0x05, 0x4e, 0xf5, 0xef, 0x37, 0xfa, 0xda, 0xf0,
		0x02, 0x0c, 0xd7, 0x89, 0x7f, 0xe8, 0xc8, 0x9a, 0xfb, 0x44, 0x9f, 0x4c, 0x4e, 0xa7, 0xbb, 0x7d,
		0x25, 0x50, 0xe1, 0x52, 0x10, 0x3f, 0xae, 0x69, 0xe0, 0xd6, 0xf4, 0x58, 0xfa, 0xb9, 0x18, 0x3c,
		0xd4, 0x97, 0xbc, 0xaf, 0xa1, 0x8f, 0x01, 0x98, 0x76, 0xa3, 0xe9, 0xf3, 0xba, 0xca, 0xd3, 0x4c,
		0x9a, 0x49, 0xd8, 0x11, 0xa6, 0x29, 0xa4, 0xe9, 0x07, 0xf3, 0x71, 0x36, 0x0f, 0x5c, 0xc4, 0x14,
		0x2e, 0xb5, 0x0d, 0x4d, 0x30, 0x43, 0x0b, 0xc7, 0xac, 0xb4, 0xa7, 0x64, 0x3d, 0x0b, 0xaa, 0x61,
		0x99, 0xc4, 0xf6, 0x75, 0xcf, 0x77, 0x09, 0xae, 0x9b, 0x76, 0x8d, 0xe5, 0xd1, 0x54, 0x31, 0x79,
		0x80, 0x2d, 0x8f, 0x68, 0x63, 0x7c, 0x7a, 0x47, 0xce, 0x52, 0x04, 0x2b, 0x16, 0x6e, 0x08, 0x31,
		0xdc, 0x81, 0xe0, 0xd3, 0x01, 0x62, 0xf6, 0x1f, 0x47, 0x20, 0x13, 0xea, 0xce, 0xd0, 0x19, 0xc8,
		0x5e, 0xc7, 0x37, 0xb1, 0x2e, 0x3b, 0x6e, 0xee, 0x89, 0x0c, 0x95, 0x6d, 0x8b, 0xae, 0xfb, 0x59,
		0x98, 0x64, 0x2a, 0x4e, 0xd3, 0x27, 0xae, 0x6e, 0x58, 0xd8, 0xf3, 0x98, 0xd3, 0x52, 0x4c, 0x15,
		0xd1, 0xb9, 0x2d, 0x3a, 0xb5, 0x22, 0x67, 0xd0, 0x45, 0x98, 0x60, 0x88, 0x7a, 0xd3, 0xf2, 0xcd,
		0x86, 0x45, 0x74, 0xfa, 0x0e, 0xe0, 0xb1, 0x7c, 0x1a, 0x58, 0x36, 0x4e, 0x35, 0x2a, 0x42, 0x81,
		0x5a, 0xe4, 0xa1, 0x35, 0x78, 0x8c, 0xc1, 0x6a, 0xc4, 0x26, 0x2e, 0xf6, 0x89, 0x4e, 0x7e, 0xa6,
		0x89, 0x2d, 0x4f, 0xc7, 0x76, 0x55, 0x3f, 0xc4, 0xde, 0x61, 0x7e, 0x32, 0x4c, 0x70, 0x9a, 0xea,
		0xae, 0x09, 0xd5, 0x32, 0xd3, 0x5c, 0xb6, 0xab, 0x9f, 0xc2, 0xde, 0x21, 0x2a, 0xc2, 0x29, 0x46,
		0xe4, 0xf9, 0xae, 0x69, 0xd7, 0x74, 0xe3, 0x90, 0x18, 0x37, 0xf4, 0xa6, 0x7f, 0x70, 0x29, 0xff,
		0x48, 0x98, 0x81, 0x19, 0xb9, 0xc3, 0x74, 0x56, 0xa8, 0xca, 0x9e, 0x7f, 0x70, 0x09, 0xed, 0x40,
		0x96, 0xee, 0x47, 0xdd, 0x7c, 0x8d, 0xe8, 0x07, 0x8e, 0xcb, 0x6a, 0x44, 0xae, 0xcf, 0xe1, 0x0e,
		0x39, 0x71, 0x7e, 0x4b, 0x00, 0x2a, 0x4e, 0x95, 0x14, 0x93, 0x3b, 0xdb, 0xe5, 0xf2, 0xaa, 0x96,
		0x91, 0x2c, 0x57, 0x1c, 0x97, 0xc6, 0x54, 0xcd, 0x09, 0x7c, 0x9c, 0xe1, 0x31, 0x55, 0x73, 0xa4,
		0x87, 0x2f, 0xc2, 0x84, 0x61, 0xf0, 0x65, 0x9b, 0x86, 0x2e, 0x9a, 0x75, 0x2f, 0xaf, 0x76, 0xf8,
		0xcb, 0x30, 0xd6, 0xb8, 0x82, 0x08, 0x73, 0x0f, 0x3d, 0x0f, 0x0f, 0xb5, 0xfd, 0x15, 0x06, 0x8e,
		0xf7, 0xac, 0xb2, 0x1b, 0x7a, 0x11, 0x26, 0x1a, 0xad, 0x5e, 0x20, 0xea, 0x78, 0x62, 0xa3, 0xd5,
		0x0d, 0x3b, 0xc7, 0x5e, 0xc0, 0x5c, 0x62, 0x60, 0x9f, 0x54, 0xf3, 0x0f, 0x87, 0xb5, 0x43, 0x13,
		0xe8, 0x3c, 0xa8, 0x86, 0xa1, 0x13, 0x1b, 0xef, 0x5b, 0x44, 0xc7, 0x2e, 0xb1, 0xb1, 0x97, 0x9f,
		0x0e, 0x2b, 0xe7, 0x0c, 0xa3, 0xcc, 0x66, 0x97, 0xd9, 0x24, 0x7a, 0x1a, 0xc6, 0x9d, 0xfd, 0xeb,
		0x06, 0x0f, 0x2e, 0xbd, 0xe1, 0x92, 0x03, 0xf3, 0xd5, 0xfc, 0xe3, 0xcc, 0x4d, 0x63, 0x74, 0x82,
		0x85, 0xd6, 0x36, 0x13, 0xa3, 0xa7, 0x40, 0x35, 0xbc, 0x43, 0xec, 0x36, 0x58, 0x91, 0xf6, 0x1a,
		0xd8, 0x20, 0xf9, 0x73, 0x5c, 0x95, 0xcb, 0x37, 0xa5, 0x18, 0x95, 0x61, 0x9a, 0x2e, 0xde, 0xc6,
		0xb6, 0xa3, 0x37, 0x3d, 0xa2, 0xb7, 0x4d, 0x0c, 0xf6, 0xe2, 0x09, 0x6a, 0x96, 0xf6, 0xa8, 0x54,
		0xdb, 0xf3, 0xc8, 0x6a, 0xa0, 0x24, 0xb7, 0xe7, 0x1a, 0x4c, 0x36, 0x6d, 0xd3, 0xf6, 0x89, 0xdb,
		0x70, 0x09, 0x05, 0xf3, 0x03, 0x9b, 0xff, 0xd7, 0x91, 0x63, 0x9a, 0xee, 0xbd, 0xb0, 0x36, 0x0f,
		0x12, 0x6d, 0xa2, 0xd9, 0x2b, 0x9c, 0x2d, 0x42, 0x36, 0x1c, 0x3b, 0x28, 0x0d, 0x3c, 0x7a, 0x54,
		0x85, 0x56, 0xd4, 0x95, 0xad, 0x55, 0x5a, 0x0b, 0x5f, 0x29, 0xab, 0x31, 0x5a, 0x93, 0x37, 0xd6,
		0x77, 0xcb, 0xba, 0xb6, 0xb7, 0xb9, 0xbb, 0x5e, 0x29, 0xab, 0xf1, 0xa7, 0xd3, 0xa9, 0xf7, 0x47,
		0xd4, 0xdb, 0xb7, 0x6f, 0xdf, 0x8e, 0xcd, 0x7e, 0x3b, 0x06, 0xb9, 0xce, 0x3e, 0x18, 0x7d, 0x02,
		0x1e, 0x96, 0x2f, 0xad, 0x1e, 0xf1, 0xf5, 0x5b, 0xa6, 0xcb, 0xc2, 0xb9, 0x8e, 0x79, 0x27, 0x19,
		0xec, 0xc4, 0xa4, 0xd0, 0xda, 0x21, 0xfe, 0x4b, 0xa6, 0x4b, 0x83, 0xb5, 0x8e, 0x7d, 0xb4, 0x01,
		0xd3, 0xb6, 0xa3, 0x7b, 0x3e, 0xb6, 0xab, 0xd8, 0xad, 0xea, 0xed, 0xeb, 0x02, 0x1d, 0x1b, 0x06,
		0xf1, 0x3c, 0x87, 0x57, 0x92, 0x80, 0xe5, 0x51, 0xdb, 0xd9, 0x11, 0xca, 0xed, 0x14, 0xbb, 0x2c,
		0x54, 0xbb, 0xa2, 0x26, 0x7e, 0x5c, 0xd4, 0x3c, 0x02, 0xe9, 0x3a, 0x6e, 0xe8, 0xc4, 0xf6, 0xdd,
		0x16, 0xeb, 0xde, 0x52, 0x5a, 0xaa, 0x8e, 0x1b, 0x65, 0x3a, 0xfe, 0xd1, 0xed, 0x41, 0xd8, 0x8f,
		0xff, 0x1c, 0x87, 0x6c, 0xb8, 0x83, 0xa3, 0x0d, 0xb1, 0xc1, 0xd2, 0xbc, 0xc2, 0xb2, 0xc0, 0xd9,
		0xfb, 0xf6, 0x7b, 0xf3, 0x2b, 0x34, 0xff, 0x17, 0x87, 0x79, 0x5f, 0xa5, 0x71, 0x24, 0xad, 0xbd,
		0x34, 0xd6, 0x08, 0xef, 0xd6, 0x53, 0x9a, 0x18, 0xa1, 0x35, 0x18, 0xbe, 0xee, 0x31, 0xee, 0x61,
		0xc6, 0xfd, 0xf8, 0xfd, 0xb9, 0xaf, 0xee, 0x30, 0xf2, 0xf4, 0xd5, 0x1d, 0x7d, 0x73, 0x4b, 0xab,
		0x2c, 0x6f, 0x68, 0x02, 0x8e, 0x4e, 0x43, 0xc2, 0xc2, 0xaf, 0xb5, 0x3a, 0x2b, 0x05, 0x13, 0x0d,
		0xea, 0xf8, 0xd3, 0x90, 0xb8, 0x45, 0xf0, 0x8d, 0xce, 0xfc, 0xcc, 0x44, 0x3f, 0xc2, 0xd0, 0x3f,
		0x0f, 0x49, 0xe6, 0x2f, 0x04, 0x20, 0x3c, 0xa6, 0x0e, 0xa1, 0x14, 0x24, 0x56, 0xb6, 0x34, 0x1a,
		0xfe, 0x2a, 0x64, 0xb9, 0x54, 0xdf, 0x5e, 0x2f, 0xaf, 0x94, 0xd5, 0xd8, 0xec, 0x45, 0x18, 0xe6,
		0x4e, 0xa0, 0x47, 0x23, 0x70, 0x83, 0x3a, 0x24, 0x86, 0x82, 0x43, 0x91, 0xb3, 0x7b, 0x95, 0x52,
		0x59, 0x53, 0x63, 0xe1, 0xed, 0xfd, 0x6b, 0x05, 0x32, 0xa1, 0x86, 0x8a, 0x96, 0x72, 0x6c, 0x59,
		0xce, 0x2d, 0x1d, 0x5b, 0x26, 0xf6, 0xc4, 0xfe, 0x00, 0x13, 0x2d, 0x53, 0xc9, 0xa0, 0xfe, 0xfb,
		0x3f, 0x89, 0xcd, 0x2f, 0x29, 0xa0, 0x76, 0x37, 0x63, 0x5d, 0x06, 0x2a, 0x3f, 0x56, 0x03, 0xdf,
		0x52, 0x20, 0xd7, 0xd9, 0x81, 0x75, 0x99, 0x77, 0xe6, 0xc7, 0x6a, 0xde, 0x17, 0x14, 0x18, 0xed,
		0xe8, 0xbb, 0xfe, 0x5f, 0x59, 0xf7, 0x66, 0x1c, 0x26, 0xfa, 0xe0, 0xd0, 0xb2, 0x68, 0x50, 0x79,
		0xcf, 0xfc, 0xf1, 0x41, 0x9e, 0x35, 0x4f, 0xeb, 0xdf, 0x36, 0x76, 0x7d, 0xd1, 0xcf, 0x3e, 0x05,
		0xaa, 0x59, 0x25, 0xb6, 0x6f, 0x1e, 0x98, 0xc4, 0x15, 0xef, 0xc6, 0xbc, 0x6b, 0x1d, 0x6b, 0xcb,
		0xf9, 0xeb, 0xf1, 0xc7, 0x00, 0x35, 0x1c, 0xcf, 0xf4, 0xcd, 0x9b, 0x44, 0x37, 0x6d, 0xf9, 0x22,
		0x4d, 0xbb, 0xd8, 0x84, 0xa6, 0xca, 0x99, 0x75, 0xdb, 0x0f, 0xb4, 0x6d, 0x52, 0xc3, 0x5d, 0xda,
		0x34, 0x0d, 0xc5, 0x35, 0x55, 0xce, 0x04, 0xda, 0x67, 0x20, 0x5b, 0x75, 0x9a, 0xb4, 0x21, 0xe0,
		0x7a, 0x34, 0xeb, 0x29, 0x5a, 0x86, 0xcb, 0x02, 0x15, 0xd1, 0xb1, 0xb5, 0xdf, 0xe0, 0xb3, 0x5a,
		0x86, 0xcb, 0xb8, 0xca, 0x93, 0x30, 0x86, 0x6b, 0x35, 0x97, 0x92, 0x4b, 0x22, 0xde, 0x86, 0xe6,
		0x02, 0x31, 0x53, 0x9c, 0xba, 0x0a, 0x29, 0xe9, 0x07, 0x5a, 0x58, 0xa8, 0x27, 0xf4, 0x06, 0xbf,
		0x47, 0x89, 0xd1, 0x97, 0x7a, 0x5b, 0x4e, 0x9e, 0x81, 0xac, 0xe9, 0xe9, 0xed, 0x0b, 0xbd, 0xd8,
		0x4c, 0x6c, 0x2e, 0xa5, 0x65, 0x4c, 0x2f, 0xb8, 0xc1, 0x99, 0x7d, 0x3b, 0x06, 0xb9, 0xce, 0x0b,
		0x49, 0xb4, 0x0a, 0x29, 0xcb, 0x31, 0x30, 0x0b, 0x04, 0x7e, 0x1b, 0x3e, 0x17, 0x71, 0x87, 0x39,
		0xbf, 0x21, 0xf4, 0xb5, 0x00, 0x39, 0xf5, 0xf7, 0x0a, 0xa4, 0xa4, 0x18, 0x9d, 0x82, 0x44, 0x03,
		0xfb, 0x87, 0x8c, 0x2e, 0x59, 0x8a, 0xa9, 0x8a, 0xc6, 0xc6, 0x54, 0xee, 0x35, 0xb0, 0xcd, 0x42,
		0x40, 0xc8, 0xe9, 0x98, 0xee, 0xab, 0x45, 0x70, 0x95, 0x35, 0xb8, 0x4e, 0xbd, 0x4e, 0x6c, 0xdf,
		0x93, 0xfb, 0x2a, 0xe4, 0x2b, 0x42, 0x8c, 0x9e, 0x81, 0x71, 0xdf, 0xc5, 0xa6, 0xd5, 0xa1, 0x9b,
		0x60, 0xba, 0xaa, 0x9c, 0x08, 0x94, 0x8b, 0x70, 0x5a, 0xf2, 0x56, 0x89, 0x8f, 0x8d, 0x43, 0x52,
		0x6d, 0x83, 0x86, 0xd9, 0x6d, 0xd7, 0xc3, 0x42, 0x61, 0x55, 0xcc, 0x4b, 0x6c, 0xe9, 0x1a, 0x4c,
		0x18, 0x4e, 0xbd, 0xdb, 0x13, 0x25, 0xb5, 0xeb, 0xbd, 0xcb, 0xfb, 0x94, 0xf2, 0x0a, 0xb4, 0x9b,
		0x8a, 0xaf, 0xc4, 0xe2, 0x6b, 0xdb, 0xa5, 0xaf, 0xc5, 0xa6, 0xd6, 0x38, 0x6e, 0x5b, 0x7a, 0x50,
		0x23, 0x07, 0x16, 0x31, 0xa8, 0x77, 0xe0, 0xcb, 0x67, 0xe1, 0xe3, 0x35, 0xd3, 0x3f, 0x6c, 0xee,
		0xcf, 0x1b, 0x4e, 0xfd, 0x7c, 0xcd, 0xa9, 0x39, 0xed, 0x9f, 0x33, 0xe8, 0x88, 0x0d, 0xd8, 0x7f,
		0xe2, 0x27, 0x8d, 0x74, 0x20, 0x9d, 0x8a, 0xfc, 0xfd, 0xa3, 0xb8, 0x09, 0x13, 0x42, 0x59, 0x67,
		0x77, 0xaa, 0xbc, 0x05, 0x45, 0xf7, 0x7d, 0x21, 0xcf, 0x7f, 0xe3, 0x3d, 0x56, 0x12, 0xb4, 0x71,
		0x01, 0xa5, 0x73, 0xbc, 0x49, 0x2d, 0x6a, 0xf0, 0x50, 0x07, 0x1f, 0x8f, 0x61, 0xe2, 0x46, 0x30,
		0x7e, 0x5b, 0x30, 0x4e, 0x84, 0x18, 0x77, 0x04, 0xb4, 0xb8, 0x02, 0xa3, 0x27, 0xe1, 0xfa, 0x5b,
		0xc1, 0x95, 0x25, 0x61, 0x92, 0x35, 0x18, 0x63, 0x24, 0x46, 0xd3, 0xf3, 0x9d, 0x3a, 0x4b, 0x10,
		0xf7, 0xa7, 0xf9, 0xbb, 0xf7, 0x78, 0x50, 0xe5, 0x28, 0x6c, 0x25, 0x40, 0x15, 0x3f, 0x0d, 0x93,
		0x54, 0xc2, 0xce, 0x60, 0x98, 0x2d, 0xfa, 0x0a, 0x21, 0xff, 0x0f, 0xaf, 0xf3, 0xd8, 0x9b, 0x08,
		0x08, 0x42, 0xbc, 0xa1, 0x9d, 0xa8, 0x11, 0xdf, 0x27, 0xae, 0xa7, 0x63, 0xcb, 0x42, 0xf7, 0xfd,
		0x8d, 0x21, 0xff, 0xf9, 0xef, 0x77, 0xee, 0xc4, 0x1a, 0x47, 0x2e, 0x5b, 0x56, 0x71, 0x0f, 0x1e,
		0xee, 0xb3, 0xb3, 0x03, 0x70, 0xbe, 0x29, 0x38, 0x27, 0x7b, 0x76, 0x97, 0xd2, 0x6e, 0x83, 0x94,
		0x07, 0xfb, 0x31, 0x00, 0xe7, 0x17, 0x04, 0x27, 0x12, 0x58, 0xb9, 0x2d, 0x94, 0xf1, 0x2a, 0x8c,
		0xdf, 0x24, 0xee, 0xbe, 0xe3, 0x89, 0xf7, 0xde, 0x01, 0xe8, 0xde, 0x12, 0x74, 0x63, 0x02, 0xc8,
		0xde, 0x82, 0x29, 0xd7, 0xf3, 0x90, 0x3a, 0xc0, 0x06, 0x19, 0x80, 0xe2, 0x8b, 0x82, 0x62, 0x84,
		0xea, 0x53, 0xe8, 0x32, 0x64, 0x6b, 0x8e, 0x48, 0xc3, 0xd1, 0xf0, 0x2f, 0x09, 0x78, 0x46, 0x62,
		0x04, 0x45, 0xc3, 0x69, 0x34, 0x2d, 0x9a, 0xa3, 0xa3, 0x29, 0x7e, 0x47, 0x52, 0x48, 0x8c, 0xa0,
		0x38, 0x81, 0x5b, 0x7f, 0x57, 0x52, 0x78, 0x21, 0x7f, 0xbe, 0x08, 0x19, 0xc7, 0xb6, 0x5a, 0x8e,
		0x3d, 0x88, 0x11, 0x5f, 0x16, 0x0c, 0x20, 0x20, 0x94, 0xe0, 0x32, 0xa4, 0x07, 0xdd, 0x88, 0xdf,
		0x13, 0xf0, 0x14, 0x91, 0x3b, 0xb0, 0x06, 0x63, 0x32, 0xc9, 0x98, 0x8e, 0x3d, 0x00, 0xc5, 0xef,
		0x0b, 0x8a, 0x5c, 0x08, 0x26, 0x96, 0xe1, 0x13, 0xcf, 0xaf, 0x91, 0x41, 0x48, 0xde, 0x96, 0xcb,
		0x10, 0x10, 0xe1, 0xca, 0x7d, 0x62, 0x1b, 0x87, 0x83, 0x31, 0x7c, 0x55, 0xba, 0x52, 0x62, 0x28,
		0xc5, 0x0a, 0x8c, 0xd6, 0xb1, 0xeb, 0x1d, 0x62, 0x6b, 0xa0, 0xed, 0xf8, 0x03, 0xc1, 0x91, 0x0d,
		0x40, 0xc2, 0x23, 0x4d, 0xfb, 0x24, 0x34, 0x5f, 0x93, 0x1e, 0x09, 0xc1, 0xc4, 0xd1, 0xf3, 0x7c,
		0x76, 0xb5, 0x70, 0x12, 0xb6, 0x3f, 0x94, 0x47, 0x8f, 0x63, 0x2b, 0x61, 0xc6, 0xcb, 0x90, 0xf6,
		0xcc, 0xd7, 0x06, 0xa2, 0xf9, 0x23, 0xb9, 0xd3, 0x0c, 0x40, 0xc1, 0x2f, 0xc3, 0xe9, 0xbe, 0xa9,
		0x7e, 0x00, 0xb2, 0x3f, 0x16, 0x64, 0xa7, 0xfa, 0xa4, 0x7b, 0x91, 0x12, 0x4e, 0x4a, 0xf9, 0x27,
		0x32, 0x25, 0x90, 0x2e, 0xae, 0x6d, 0xda, 0xc6, 0x7a, 0xf8, 0xe0, 0x64, 0x5e, 0xfb, 0x53, 0xe9,
		0x35, 0x8e, 0xed, 0xf0, 0xda, 0x2e, 0x9c, 0x12, 0x8c, 0x27, 0xdb, 0xd7, 0xaf, 0xcb, 0xc4, 0xca,
		0xd1, 0x7b, 0x9d, 0xbb, 0xfb, 0x53, 0x30, 0x15, 0xb8, 0x53, 0x76, 0x60, 0x9e, 0x5e, 0xc7, 0x8d,
		0x01, 0x98, 0xbf, 0x21, 0x98, 0x65, 0xc6, 0x0f, 0x5a, 0x38, 0xaf, 0x82, 0x1b, 0x94, 0xfc, 0x1a,
		0xe4, 0x25, 0x79, 0xd3, 0x76, 0x89, 0xe1, 0xd4, 0x6c, 0xf3, 0x35, 0x52, 0x1d, 0x80, 0xfa, 0xcf,
		0xba, 0xb6, 0x6a, 0x2f, 0x04, 0xa7, 0xcc, 0xeb, 0xa0, 0x06, 0xfd, 0x86, 0x6e, 0xd6, 0x1b, 0x8e,
		0xeb, 0x47, 0x30, 0xfe, 0xb9, 0xdc, 0xa9, 0x00, 0xb7, 0xce, 0x60, 0xc5, 0x32, 0xe4, 0xd8, 0x70,
		0xd0, 0x90, 0xfc, 0x0b, 0x41, 0x34, 0xda, 0x46, 0x89, 0xc4, 0x61, 0x38, 0xf5, 0x06, 0x76, 0x07,
		0xc9, 0x7f, 0xdf, 0x94, 0x89, 0x43, 0x40, 0x78, 0xf4, 0x8d, 0x75, 0x55, 0x62, 0x14, 0xf5, 0xf3,
		0x6b, 0xfe, 0x67, 0x3f, 0x14, 0x67, 0xb6, 0xb3, 0x10, 0x17, 0x37, 0xa8, 0x7b, 0x3a, 0xcb, 0x65,
		0x34, 0xd9, 0xeb, 0x1f, 0x06, 0x1e, 0xea, 0xa8, 0x96, 0xc5, 0x2b, 0x30, 0xda, 0x51, 0x2a, 0xa3,
		0xa9, 0x7e, 0x4e, 0x50, 0x65, 0xc3, 0x95, 0xb2, 0x78, 0x11, 0x12, 0xb4, 0xec, 0x45, 0xc3, 0x7f,
		0x5e, 0xc0, 0x99, 0x7a, 0xf1, 0x93, 0x90, 0x92, 0xe5, 0x2e, 0x1a, 0xfa, 0x0b, 0x02, 0x1a, 0x40,
		0x28, 0x5c, 0x96, 0xba, 0x68, 0xf8, 0x67, 0x25, 0x5c, 0x42, 0x28, 0x7c, 0x70, 0x17, 0x7e, 0xeb,
		0x97, 0x12, 0x22, 0x5d, 0x49, 0xdf, 0x5d, 0x86, 0x11, 0x51, 0xe3, 0xa2, 0xd1, 0x9f, 0x13, 0x0f,
		0x97, 0x88, 0xe2, 0x73, 0x90, 0x1c, 0xd0, 0xe1, 0xbf, 0x2c, 0xa0, 0x5c, 0xbf, 0xb8, 0x02, 0x99,
		0x50, 0x5d, 0x8b, 0x86, 0xff, 0x8a, 0x80, 0x87, 0x51, 0xd4, 0x74, 0x51, 0xd7, 0xa2, 0x09, 0x7e,
		0x55, 0x9a, 0x2e, 0x10, 0xd4, 0x6d, 0xb2, 0xa4, 0x45, 0xa3, 0x7f, 0x4d, 0x7a, 0x5d, 0x42, 0x8a,
		0x2f, 0x42, 0x3a, 0x48, 0x53, 0xd1, 0xf8, 0x5f, 0x17, 0xf8, 0x36, 0x86, 0x7a, 0x20, 0x94, 0x26,
		0xa3, 0x29, 0x7e, 0x43, 0x7a, 0x20, 0x84, 0xa2, 0xc7, 0xa8, 0xbb, 0xf4, 0x45, 0x33, 0xfd, 0xa6,
		0x3c, 0x46, 0x5d, 0x95, 0x8f, 0xee, 0x26, 0xcb, 0x16, 0xd1, 0x14, 0xbf, 0x25, 0x77, 0x93, 0xe9,
		0x53, 0x33, 0xba, 0x6b, 0x49, 0x34, 0xc7, 0x6f, 0x4b, 0x33, 0xba, 0x4a, 0x49, 0x71, 0x1b, 0x50,
		0x6f, 0x1d, 0x89, 0xe6, 0x7b, 0x43, 0xf0, 0x8d, 0xf7, 0x94, 0x91, 0xe2, 0x4b, 0x70, 0xaa, 0x7f,
		0x0d, 0x89, 0x66, 0xfd, 0xfc, 0x87, 0x5d, 0x5d, 0x7f, 0xb8, 0x84, 0x14, 0x77, 0xdb, 0x5d, 0x7f,
		0xb8, 0x7e, 0x44, 0xd3, 0xbe, 0xf9, 0x61, 0xe7, 0x8b, 0x5d, 0xb8, 0x7c, 0x14, 0x97, 0x01, 0xda,
		0xa9, 0x3b, 0x9a, 0xeb, 0x2d, 0xc1, 0x15, 0x02, 0xd1, 0xa3, 0x21, 0x32, 0x77, 0x34, 0xfe, 0x8b,
		0xf2, 0x68, 0x08, 0x44, 0xf1, 0x32, 0xa4, 0xec, 0xa6, 0x65, 0xd1, 0xe0, 0x40, 0xf7, 0xff, 0xa4,
		0x21, 0xff, 0xbd, 0x8f, 0xc4, 0xc1, 0x90, 0x80, 0xe2, 0x45, 0x48, 0x92, 0xfa, 0x3e, 0xa9, 0x46,
		0x21, 0xff, 0xed, 0x23, 0x99, 0x10, 0xa8, 0x76, 0xf1, 0x45, 0x00, 0xfe, 0xd2, 0xc8, 0xee, 0xb0,
		0x23, 0xb0, 0xff, 0xfe, 0x91, 0xf8, 0x99, 0xb5, 0x0d, 0x69, 0x13, 0xf0, 0x1f, 0x6d, 0xef, 0x4f,
		0xf0, 0xfd, 0x4e, 0x02, 0xf6, 0xa2, 0xf9, 0x3c, 0x8c, 0x5c, 0xf7, 0x1c, 0xdb, 0xc7, 0xb5, 0x28,
		0xf4, 0x7f, 0x08, 0xb4, 0xd4, 0xa7, 0x0e, 0xab, 0x3b, 0x2e, 0xf1, 0x71, 0xcd, 0x8b, 0xc2, 0xfe,
		0xa7, 0xc0, 0x06, 0x00, 0x0a, 0x36, 0xb0, 0xe7, 0x0f, 0xb2, 0xee, 0xff, 0x92, 0x60, 0x09, 0xa0,
		0x46, 0xd3, 0xff, 0x6f, 0x90, 0x56, 0x14, 0xf6, 0x03, 0x69, 0xb4, 0xd0, 0x2f, 0x7e, 0x12, 0xd2,
		0xf4, 0x5f, 0xfe, 0xe9, 0x41, 0x04, 0xf8, 0xbf, 0x05, 0xb8, 0x8d, 0x28, 0x9d, 0xe9, 0x7f, 0xb5,
		0x03, 0x6b, 0xce, 0x9a, 0xc3, 0x2f, 0x75, 0xe0, 0x7b, 0x39, 0x38, 0x67, 0x38, 0xf5, 0x7d, 0xc7,
		0x3b, 0xcf, 0xcf, 0x64, 0x70, 0x22, 0xcf, 0xcb, 0x05, 0x88, 0xbb, 0x99, 0x60, 0x41, 0x53, 0x27,
		0xbb, 0xd4, 0x99, 0x7d, 0x63, 0x14, 0x52, 0x2b, 0xd8, 0xf3, 0xf1, 0x2d, 0xdc, 0x42, 0xe7, 0x20,
		0xb5, 0x6e, 0xfb, 0x17, 0x16, 0xb6, 0x7d, 0x97, 0xdd, 0x7d, 0xc7, 0x4b, 0xe9, 0x7b, 0x77, 0xa6,
		0x93, 0x26, 0x95, 0x69, 0x29, 0x53, 0x4c, 0xa1, 0xb3, 0x90, 0x64, 0x6a, 0xec, 0x82, 0x3f, 0x5e,
		0x1a, 0x7d, 0xe7, 0xce, 0xf4, 0x50, 0x5b, 0x8f, 0xff, 0x41, 0x2f, 0x43, 0xa6, 0xd2, 0xda, 0x33,
		0x6d, 0x7f, 0x69, 0x91, 0xd2, 0xd1, 0xe5, 0x27, 0x4a, 0xcf, 0xdd, 0xbb, 0x33, 0x7d, 0xe1, 0x58,
		0x03, 0x69, 0x65, 0x69, 0x2f, 0x4c, 0xa2, 0xd9, 0xb7, 0x4c, 0x99, 0x7a, 0x9b, 0x0b, 0xbd, 0x04,
		0x29, 0x39, 0xc9, 0xef, 0x52, 0x4b, 0x97, 0x85, 0x09, 0x0f, 0xc4, 0x9d, 0x92, 0xdc, 0xe8, 0xa7,
		0x21, 0x5b, 0x69, 0x5d, 0xb1, 0x1c, 0x2c, 0x7c, 0x90, 0x9c, 0x51, 0xe6, 0x62, 0xa5, 0x4b, 0xf7,
		0xee, 0x4c, 0x2f, 0x0e, 0x4c, 0x2c, 0xe0, 0x8c, 0x39, 0x5b, 0x0f, 0xb1, 0xa1, 0x57, 0x20, 0x1d,
		0x4c, 0xb3, 0xdb, 0xda, 0x58, 0xe9, 0x13, 0xc2, 0xee, 0x07, 0xa3, 0x4f, 0x07, 0xf4, 0x21, 0xcb,
		0xb9, 0xbb, 0x47, 0x66, 0x94, 0x39, 0xe5, 0x41, 0x2c, 0x17, 0x3e, 0x91, 0x96, 0x73, 0x87, 0xb7,
		0x2d, 0x5f, 0x5a, 0x64, 0xd7, 0xc3, 0xca, 0x83, 0x5a, 0x2e, 0xe8, 0xd3, 0x01, 0x3d, 0xba, 0x0a,
		0x23, 0x95, 0x56, 0xa9, 0xe5, 0x13, 0x8f, 0x7d, 0x19, 0x90, 0x2d, 0x3d, 0x7b, 0xef, 0xce, 0xf4,
		0xc7, 0x06, 0x64, 0x65, 0x38, 0x6d, 0xa4, 0xce, 0x09, 0xd0, 0x0c, 0x64, 0x36, 0x1d, 0xb7, 0x8e,
		0x2d, 0xce, 0x07, 0xfc, 0xba, 0xdb, 0x6e, 0x8b, 0xd0, 0x1e, 0x5d, 0x09, 0xdf, 0x6d, 0x8f, 0x7d,
		0x9d, 0xfc, 0x43, 0xc4, 0x64, 0x5a, 0xc6, 0x8d, 0x87, 0x4c, 0x48, 0x56, 0x5a, 0x15, 0xdc, 0xc8,
		0x67, 0xd9, 0xd5, 0xf5, 0x63, 0xf3, 0x01, 0x42, 0x9e, 0xad, 0x79, 0x36, 0xcf, 0x7e, 0x7a, 0x2d,
		0x2d, 0xde, 0xbb, 0x33, 0xfd, 0xec, 0xc0, 0x4f, 0xac, 0xe0, 0x06, 0x7b, 0x5c, 0xb2, 0x4e, 0xff,
		0x45, 0xdf, 0x54, 0xe8, 0xc1, 0xe2, 0xf7, 0x7b, 0xf4, 0x89, 0xa3, 0xec, 0x89, 0x67, 0xfb, 0x3e,
		0x31, 0xd0, 0xe2, 0xcf, 0xb5, 0x3f, 0xf3, 0xee, 0x09, 0x56, 0xca, 0x5f, 0x0e, 0xe8, 0xa3, 0x7f,
		0xf1, 0xdd, 0x07, 0x3e, 0xb4, 0x81, 0x05, 0xe8, 0x75, 0x05, 0x46, 0x2b, 0xad, 0x4d, 0x51, 0xe5,
		0xa8, 0xe5, 0x39, 0xf1, 0x0d, 0x6b, 0x3f, 0xcb, 0x43, 0x7a, 0xdc, 0xf6, 0xa5, 0xcf, 0xbc, 0x3b,
		0xbd, 0x30, 0xb0, 0x11, 0x2c, 0x3d, 0x31, 0x1b, 0x46, 0xeb, 0x61, 0x2e, 0xf4, 0x59, 0x66, 0x45,
		0x99, 0x56, 0xcc, 0x2a, 0xa9, 0x52, 0x2b, 0xc6, 0xee, 0x63, 0x45, 0x48, 0x8f, 0x5b, 0x51, 0xa4,
		0x51, 0xff, 0xe0, 0x96, 0x84, 0xf8, 0xa6, 0x2e, 0x01, 0xb4, 0x43, 0x02, 0xa9, 0x10, 0xbf, 0x41,
		0x5a, 0xe2, 0x63, 0x21, 0xfa, 0x2f, 0x9a, 0x6c, 0x7f, 0x0c, 0xa7, 0xcc, 0x25, 0xc4, 0x17, 0x6e,
		0xc5, 0xd8, 0x25, 0x65, 0xea, 0x05, 0x50, 0xbb, 0xb7, 0xf6, 0x44, 0x78, 0x0d, 0x50, 0xaf, 0x83,
		0xc3, 0x0c, 0x49, 0xce, 0xf0, 0x44, 0x98, 0x21, 0xb3, 0xa0, 0xb6, 0x5d, 0xf4, 0x92, 0x69, 0x79,
		0x8e, 0xdd, 0xc3, 0xd9, 0xed, 0xae, 0x1f, 0x8e, 0x73, 0xb6, 0x00, 0xc3, 0x5c, 0x48, 0xd7, 0xb2,
		0xce, 0xb2, 0x3d, 0x2b, 0x4a, 0xac, 0xc2, 0x2c, 0x2d, 0x96, 0x36, 0xde, 0xb9, 0x5b, 0x18, 0xfa,
		0xce, 0xdd, 0xc2, 0xd0, 0x3f, 0xdd, 0x2d, 0x0c, 0x7d, 0xf7, 0x6e, 0x41, 0x79, 0xff, 0x6e, 0x41,
		0xf9, 0xe0, 0x6e, 0x41, 0xf9, 0xc1, 0xdd, 0x82, 0x72, 0xfb, 0xa8, 0xa0, 0x7c, 0xf5, 0xa8, 0xa0,
		0x7c, 0xfd, 0xa8, 0xa0, 0xfc, 0xd5, 0x51, 0x41, 0xf9, 0xd6, 0x51, 0x41, 0x79, 0xe7, 0xa8, 0x30,
		0xf4, 0x9d, 0xa3, 0xc2, 0xd0, 0x77, 0x8f, 0x0a, 0xca, 0xfb, 0x47, 0x85, 0xa1, 0x0f, 0x8e, 0x0a,
		0xca, 0x0f, 0x8e, 0x0a, 0xca, 0xed, 0x7f, 0x29, 0x0c, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
		0xca, 0x2d, 0xe1, 0xd1, 0xd6, 0x31, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Castaway) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Castaway")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Castaway but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Castaway but is not nil && this == nil")
	}
	if this.Int32Ptr != nil && that1.Int32Ptr != nil {
		if *this.Int32Ptr != *that1.Int32Ptr {
			return fmt.Errorf("Int32Ptr this(%v) Not Equal that(%v)", *this.Int32Ptr, *that1.Int32Ptr)
		}
	} else if this.Int32Ptr != nil {
		return fmt.Errorf("this.Int32Ptr == nil && that.Int32Ptr != nil")
	} else if that1.Int32Ptr != nil {
		return fmt.Errorf("Int32Ptr this(%v) Not Equal that(%v)", this.Int32Ptr, that1.Int32Ptr)
	}
	if this.Int32 != that1.Int32 {
		return fmt.Errorf("Int32 this(%v) Not Equal that(%v)", this.Int32, that1.Int32)
	}
	if this.MyUint64Ptr != nil && that1.MyUint64Ptr != nil {
		if *this.MyUint64Ptr != *that1.MyUint64Ptr {
			return fmt.Errorf("MyUint64Ptr this(%v) Not Equal that(%v)", *this.MyUint64Ptr, *that1.MyUint64Ptr)
		}
	} else if this.MyUint64Ptr != nil {
		return fmt.Errorf("this.MyUint64Ptr == nil && that.MyUint64Ptr != nil")
	} else if that1.MyUint64Ptr != nil {
		return fmt.Errorf("MyUint64Ptr this(%v) Not Equal that(%v)", this.MyUint64Ptr, that1.MyUint64Ptr)
	}
	if this.MyUint64 != that1.MyUint64 {
		return fmt.Errorf("MyUint64 this(%v) Not Equal that(%v)", this.MyUint64, that1.MyUint64)
	}
	if this.MyFloat32Ptr != nil && that1.MyFloat32Ptr != nil {
		if *this.MyFloat32Ptr != *that1.MyFloat32Ptr {
			return fmt.Errorf("MyFloat32Ptr this(%v) Not Equal that(%v)", *this.MyFloat32Ptr, *that1.MyFloat32Ptr)
		}
	} else if this.MyFloat32Ptr != nil {
		return fmt.Errorf("this.MyFloat32Ptr == nil && that.MyFloat32Ptr != nil")
	} else if that1.MyFloat32Ptr != nil {
		return fmt.Errorf("MyFloat32Ptr this(%v) Not Equal that(%v)", this.MyFloat32Ptr, that1.MyFloat32Ptr)
	}
	if this.MyFloat32 != that1.MyFloat32 {
		return fmt.Errorf("MyFloat32 this(%v) Not Equal that(%v)", this.MyFloat32, that1.MyFloat32)
	}
	if this.MyFloat64Ptr != nil && that1.MyFloat64Ptr != nil {
		if *this.MyFloat64Ptr != *that1.MyFloat64Ptr {
			return fmt.Errorf("MyFloat64Ptr this(%v) Not Equal that(%v)", *this.MyFloat64Ptr, *that1.MyFloat64Ptr)
		}
	} else if this.MyFloat64Ptr != nil {
		return fmt.Errorf("this.MyFloat64Ptr == nil && that.MyFloat64Ptr != nil")
	} else if that1.MyFloat64Ptr != nil {
		return fmt.Errorf("MyFloat64Ptr this(%v) Not Equal that(%v)", this.MyFloat64Ptr, that1.MyFloat64Ptr)
	}
	if this.MyFloat64 != that1.MyFloat64 {
		return fmt.Errorf("MyFloat64 this(%v) Not Equal that(%v)", this.MyFloat64, that1.MyFloat64)
	}
	if !bytes.Equal(this.MyBytes, that1.MyBytes) {
		return fmt.Errorf("MyBytes this(%v) Not Equal that(%v)", this.MyBytes, that1.MyBytes)
	}
	if !bytes.Equal(this.NormalBytes, that1.NormalBytes) {
		return fmt.Errorf("NormalBytes this(%v) Not Equal that(%v)", this.NormalBytes, that1.NormalBytes)
	}
	if len(this.MyUint64S) != len(that1.MyUint64S) {
		return fmt.Errorf("MyUint64S this(%v) Not Equal that(%v)", len(this.MyUint64S), len(that1.MyUint64S))
	}
	for i := range this.MyUint64S {
		if this.MyUint64S[i] != that1.MyUint64S[i] {
			return fmt.Errorf("MyUint64S this[%v](%v) Not Equal that[%v](%v)", i, this.MyUint64S[i], i, that1.MyUint64S[i])
		}
	}
	if len(this.MyMap) != len(that1.MyMap) {
		return fmt.Errorf("MyMap this(%v) Not Equal that(%v)", len(this.MyMap), len(that1.MyMap))
	}
	for i := range this.MyMap {
		if this.MyMap[i] != that1.MyMap[i] {
			return fmt.Errorf("MyMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyMap[i], i, that1.MyMap[i])
		}
	}
	if len(this.MyCustomMap) != len(that1.MyCustomMap) {
		return fmt.Errorf("MyCustomMap this(%v) Not Equal that(%v)", len(this.MyCustomMap), len(that1.MyCustomMap))
	}
	for i := range this.MyCustomMap {
		if this.MyCustomMap[i] != that1.MyCustomMap[i] {
			return fmt.Errorf("MyCustomMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyCustomMap[i], i, that1.MyCustomMap[i])
		}
	}
	if len(this.MyNullableMap) != len(that1.MyNullableMap) {
		return fmt.Errorf("MyNullableMap this(%v) Not Equal that(%v)", len(this.MyNullableMap), len(that1.MyNullableMap))
	}
	for i := range this.MyNullableMap {
		if !this.MyNullableMap[i].Equal(that1.MyNullableMap[i]) {
			return fmt.Errorf("MyNullableMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyNullableMap[i], i, that1.MyNullableMap[i])
		}
	}
	if len(this.MyEmbeddedMap) != len(that1.MyEmbeddedMap) {
		return fmt.Errorf("MyEmbeddedMap this(%v) Not Equal that(%v)", len(this.MyEmbeddedMap), len(that1.MyEmbeddedMap))
	}
	for i := range this.MyEmbeddedMap {
		a := this.MyEmbeddedMap[i]
		b := that1.MyEmbeddedMap[i]
		if !(&a).Equal(&b) {
			return fmt.Errorf("MyEmbeddedMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyEmbeddedMap[i], i, that1.MyEmbeddedMap[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Castaway) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int32Ptr != nil && that1.Int32Ptr != nil {
		if *this.Int32Ptr != *that1.Int32Ptr {
			return false
		}
	} else if this.Int32Ptr != nil {
		return false
	} else if that1.Int32Ptr != nil {
		return false
	}
	if this.Int32 != that1.Int32 {
		return false
	}
	if this.MyUint64Ptr != nil && that1.MyUint64Ptr != nil {
		if *this.MyUint64Ptr != *that1.MyUint64Ptr {
			return false
		}
	} else if this.MyUint64Ptr != nil {
		return false
	} else if that1.MyUint64Ptr != nil {
		return false
	}
	if this.MyUint64 != that1.MyUint64 {
		return false
	}
	if this.MyFloat32Ptr != nil && that1.MyFloat32Ptr != nil {
		if *this.MyFloat32Ptr != *that1.MyFloat32Ptr {
			return false
		}
	} else if this.MyFloat32Ptr != nil {
		return false
	} else if that1.MyFloat32Ptr != nil {
		return false
	}
	if this.MyFloat32 != that1.MyFloat32 {
		return false
	}
	if this.MyFloat64Ptr != nil && that1.MyFloat64Ptr != nil {
		if *this.MyFloat64Ptr != *that1.MyFloat64Ptr {
			return false
		}
	} else if this.MyFloat64Ptr != nil {
		return false
	} else if that1.MyFloat64Ptr != nil {
		return false
	}
	if this.MyFloat64 != that1.MyFloat64 {
		return false
	}
	if !bytes.Equal(this.MyBytes, that1.MyBytes) {
		return false
	}
	if !bytes.Equal(this.NormalBytes, that1.NormalBytes) {
		return false
	}
	if len(this.MyUint64S) != len(that1.MyUint64S) {
		return false
	}
	for i := range this.MyUint64S {
		if this.MyUint64S[i] != that1.MyUint64S[i] {
			return false
		}
	}
	if len(this.MyMap) != len(that1.MyMap) {
		return false
	}
	for i := range this.MyMap {
		if this.MyMap[i] != that1.MyMap[i] {
			return false
		}
	}
	if len(this.MyCustomMap) != len(that1.MyCustomMap) {
		return false
	}
	for i := range this.MyCustomMap {
		if this.MyCustomMap[i] != that1.MyCustomMap[i] {
			return false
		}
	}
	if len(this.MyNullableMap) != len(that1.MyNullableMap) {
		return false
	}
	for i := range this.MyNullableMap {
		if !this.MyNullableMap[i].Equal(that1.MyNullableMap[i]) {
			return false
		}
	}
	if len(this.MyEmbeddedMap) != len(that1.MyEmbeddedMap) {
		return false
	}
	for i := range this.MyEmbeddedMap {
		a := this.MyEmbeddedMap[i]
		b := that1.MyEmbeddedMap[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Wilson) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Wilson")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Wilson but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Wilson but is not nil && this == nil")
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", *this.Int64, *that1.Int64)
		}
	} else if this.Int64 != nil {
		return fmt.Errorf("this.Int64 == nil && that.Int64 != nil")
	} else if that1.Int64 != nil {
		return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", this.Int64, that1.Int64)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Wilson) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return false
		}
	} else if this.Int64 != nil {
		return false
	} else if that1.Int64 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type CastawayFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInt32Ptr() *int32
	GetInt32() int32
	GetMyUint64Ptr() *github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyUint64() github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyFloat32Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat32Type
	GetMyFloat32() github_com_gogo_protobuf_test_casttype.MyFloat32Type
	GetMyFloat64Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat64Type
	GetMyFloat64() github_com_gogo_protobuf_test_casttype.MyFloat64Type
	GetMyBytes() github_com_gogo_protobuf_test_casttype.Bytes
	GetNormalBytes() []byte
	GetMyUint64S() []github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyMap() github_com_gogo_protobuf_test_casttype.MyMapType
	GetMyCustomMap() map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyNullableMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson
	GetMyEmbeddedMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson
}

func (this *Castaway) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Castaway) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCastawayFromFace(this)
}

func (this *Castaway) GetInt32Ptr() *int32 {
	return this.Int32Ptr
}

func (this *Castaway) GetInt32() int32 {
	return this.Int32
}

func (this *Castaway) GetMyUint64Ptr() *github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyUint64Ptr
}

func (this *Castaway) GetMyUint64() github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyUint64
}

func (this *Castaway) GetMyFloat32Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat32Type {
	return this.MyFloat32Ptr
}

func (this *Castaway) GetMyFloat32() github_com_gogo_protobuf_test_casttype.MyFloat32Type {
	return this.MyFloat32
}

func (this *Castaway) GetMyFloat64Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat64Type {
	return this.MyFloat64Ptr
}

func (this *Castaway) GetMyFloat64() github_com_gogo_protobuf_test_casttype.MyFloat64Type {
	return this.MyFloat64
}

func (this *Castaway) GetMyBytes() github_com_gogo_protobuf_test_casttype.Bytes {
	return this.MyBytes
}

func (this *Castaway) GetNormalBytes() []byte {
	return this.NormalBytes
}

func (this *Castaway) GetMyUint64S() []github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyUint64S
}

func (this *Castaway) GetMyMap() github_com_gogo_protobuf_test_casttype.MyMapType {
	return this.MyMap
}

func (this *Castaway) GetMyCustomMap() map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyCustomMap
}

func (this *Castaway) GetMyNullableMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson {
	return this.MyNullableMap
}

func (this *Castaway) GetMyEmbeddedMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson {
	return this.MyEmbeddedMap
}

func NewCastawayFromFace(that CastawayFace) *Castaway {
	this := &Castaway{}
	this.Int32Ptr = that.GetInt32Ptr()
	this.Int32 = that.GetInt32()
	this.MyUint64Ptr = that.GetMyUint64Ptr()
	this.MyUint64 = that.GetMyUint64()
	this.MyFloat32Ptr = that.GetMyFloat32Ptr()
	this.MyFloat32 = that.GetMyFloat32()
	this.MyFloat64Ptr = that.GetMyFloat64Ptr()
	this.MyFloat64 = that.GetMyFloat64()
	this.MyBytes = that.GetMyBytes()
	this.NormalBytes = that.GetNormalBytes()
	this.MyUint64S = that.GetMyUint64S()
	this.MyMap = that.GetMyMap()
	this.MyCustomMap = that.GetMyCustomMap()
	this.MyNullableMap = that.GetMyNullableMap()
	this.MyEmbeddedMap = that.GetMyEmbeddedMap()
	return this
}

type WilsonFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInt64() *int64
}

func (this *Wilson) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Wilson) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewWilsonFromFace(this)
}

func (this *Wilson) GetInt64() *int64 {
	return this.Int64
}

func NewWilsonFromFace(that WilsonFace) *Wilson {
	this := &Wilson{}
	this.Int64 = that.GetInt64()
	return this
}

func (this *Castaway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&casttype.Castaway{")
	if this.Int32Ptr != nil {
		s = append(s, "Int32Ptr: "+valueToGoStringCasttype(this.Int32Ptr, "int32")+",\n")
	}
	s = append(s, "Int32: "+fmt.Sprintf("%#v", this.Int32)+",\n")
	if this.MyUint64Ptr != nil {
		s = append(s, "MyUint64Ptr: "+valueToGoStringCasttype(this.MyUint64Ptr, "github_com_gogo_protobuf_test_casttype.MyUint64Type")+",\n")
	}
	s = append(s, "MyUint64: "+fmt.Sprintf("%#v", this.MyUint64)+",\n")
	if this.MyFloat32Ptr != nil {
		s = append(s, "MyFloat32Ptr: "+valueToGoStringCasttype(this.MyFloat32Ptr, "github_com_gogo_protobuf_test_casttype.MyFloat32Type")+",\n")
	}
	s = append(s, "MyFloat32: "+fmt.Sprintf("%#v", this.MyFloat32)+",\n")
	if this.MyFloat64Ptr != nil {
		s = append(s, "MyFloat64Ptr: "+valueToGoStringCasttype(this.MyFloat64Ptr, "github_com_gogo_protobuf_test_casttype.MyFloat64Type")+",\n")
	}
	s = append(s, "MyFloat64: "+fmt.Sprintf("%#v", this.MyFloat64)+",\n")
	if this.MyBytes != nil {
		s = append(s, "MyBytes: "+valueToGoStringCasttype(this.MyBytes, "github_com_gogo_protobuf_test_casttype.Bytes")+",\n")
	}
	if this.NormalBytes != nil {
		s = append(s, "NormalBytes: "+valueToGoStringCasttype(this.NormalBytes, "byte")+",\n")
	}
	if this.MyUint64S != nil {
		s = append(s, "MyUint64S: "+fmt.Sprintf("%#v", this.MyUint64S)+",\n")
	}
	keysForMyMap := make([]string, 0, len(this.MyMap))
	for k := range this.MyMap {
		keysForMyMap = append(keysForMyMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyMap)
	mapStringForMyMap := "github_com_gogo_protobuf_test_casttype.MyMapType{"
	for _, k := range keysForMyMap {
		mapStringForMyMap += fmt.Sprintf("%#v: %#v,", k, this.MyMap[k])
	}
	mapStringForMyMap += "}"
	if this.MyMap != nil {
		s = append(s, "MyMap: "+mapStringForMyMap+",\n")
	}
	keysForMyCustomMap := make([]string, 0, len(this.MyCustomMap))
	for k := range this.MyCustomMap {
		keysForMyCustomMap = append(keysForMyCustomMap, string(k))
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyCustomMap)
	mapStringForMyCustomMap := "map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type{"
	for _, k := range keysForMyCustomMap {
		mapStringForMyCustomMap += fmt.Sprintf("%#v: %#v,", k, this.MyCustomMap[github_com_gogo_protobuf_test_casttype.MyStringType(k)])
	}
	mapStringForMyCustomMap += "}"
	if this.MyCustomMap != nil {
		s = append(s, "MyCustomMap: "+mapStringForMyCustomMap+",\n")
	}
	keysForMyNullableMap := make([]int32, 0, len(this.MyNullableMap))
	for k := range this.MyNullableMap {
		keysForMyNullableMap = append(keysForMyNullableMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyNullableMap)
	mapStringForMyNullableMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson{"
	for _, k := range keysForMyNullableMap {
		mapStringForMyNullableMap += fmt.Sprintf("%#v: %#v,", k, this.MyNullableMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyNullableMap += "}"
	if this.MyNullableMap != nil {
		s = append(s, "MyNullableMap: "+mapStringForMyNullableMap+",\n")
	}
	keysForMyEmbeddedMap := make([]int32, 0, len(this.MyEmbeddedMap))
	for k := range this.MyEmbeddedMap {
		keysForMyEmbeddedMap = append(keysForMyEmbeddedMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyEmbeddedMap)
	mapStringForMyEmbeddedMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson{"
	for _, k := range keysForMyEmbeddedMap {
		mapStringForMyEmbeddedMap += fmt.Sprintf("%#v: %#v,", k, this.MyEmbeddedMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyEmbeddedMap += "}"
	if this.MyEmbeddedMap != nil {
		s = append(s, "MyEmbeddedMap: "+mapStringForMyEmbeddedMap+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Wilson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&casttype.Wilson{")
	if this.Int64 != nil {
		s = append(s, "Int64: "+valueToGoStringCasttype(this.Int64, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCasttype(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringCasttype(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func NewPopulatedCastaway(r randyCasttype, easy bool) *Castaway {
	this := &Castaway{}
	if r.Intn(10) != 0 {
		v1 := int32(r.Int63())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Int32Ptr = &v1
	}
	this.Int32 = int32(r.Int63())
	if r.Intn(2) == 0 {
		this.Int32 *= -1
	}
	if r.Intn(10) != 0 {
		v2 := github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
		this.MyUint64Ptr = &v2
	}
	this.MyUint64 = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
	if r.Intn(10) != 0 {
		v3 := github_com_gogo_protobuf_test_casttype.MyFloat32Type(r.Float32())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.MyFloat32Ptr = &v3
	}
	this.MyFloat32 = github_com_gogo_protobuf_test_casttype.MyFloat32Type(r.Float32())
	if r.Intn(2) == 0 {
		this.MyFloat32 *= -1
	}
	if r.Intn(10) != 0 {
		v4 := github_com_gogo_protobuf_test_casttype.MyFloat64Type(r.Float64())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.MyFloat64Ptr = &v4
	}
	this.MyFloat64 = github_com_gogo_protobuf_test_casttype.MyFloat64Type(r.Float64())
	if r.Intn(2) == 0 {
		this.MyFloat64 *= -1
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(100)
		this.MyBytes = make(github_com_gogo_protobuf_test_casttype.Bytes, v5)
		for i := 0; i < v5; i++ {
			this.MyBytes[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(100)
		this.NormalBytes = make([]byte, v6)
		for i := 0; i < v6; i++ {
			this.NormalBytes[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.MyUint64S = make([]github_com_gogo_protobuf_test_casttype.MyUint64Type, v7)
		for i := 0; i < v7; i++ {
			this.MyUint64S[i] = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.MyMap = make(github_com_gogo_protobuf_test_casttype.MyMapType)
		for i := 0; i < v8; i++ {
			v9 := randStringCasttype(r)
			this.MyMap[v9] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.MyCustomMap = make(map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type)
		for i := 0; i < v10; i++ {
			v11 := github_com_gogo_protobuf_test_casttype.MyStringType(randStringCasttype(r))
			this.MyCustomMap[v11] = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.MyNullableMap = make(map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson)
		for i := 0; i < v12; i++ {
			this.MyNullableMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(int32(r.Int31()))] = NewPopulatedWilson(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(10)
		this.MyEmbeddedMap = make(map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson)
		for i := 0; i < v13; i++ {
			this.MyEmbeddedMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(int32(r.Int31()))] = *NewPopulatedWilson(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCasttype(r, 16)
	}
	return this
}

func NewPopulatedWilson(r randyCasttype, easy bool) *Wilson {
	this := &Wilson{}
	if r.Intn(10) != 0 {
		v14 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		this.Int64 = &v14
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCasttype(r, 2)
	}
	return this
}

type randyCasttype interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCasttype(r randyCasttype) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCasttype(r randyCasttype) string {
	v15 := r.Intn(100)
	tmps := make([]rune, v15)
	for i := 0; i < v15; i++ {
		tmps[i] = randUTF8RuneCasttype(r)
	}
	return string(tmps)
}
func randUnrecognizedCasttype(r randyCasttype, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldCasttype(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldCasttype(data []byte, r randyCasttype, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateCasttype(data, uint64(key))
		v16 := r.Int63()
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		data = encodeVarintPopulateCasttype(data, uint64(v16))
	case 1:
		data = encodeVarintPopulateCasttype(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateCasttype(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateCasttype(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateCasttype(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateCasttype(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Castaway) Size() (n int) {
	var l int
	_ = l
	if m.Int32Ptr != nil {
		n += 1 + sovCasttype(uint64(*m.Int32Ptr))
	}
	n += 1 + sovCasttype(uint64(m.Int32))
	if m.MyUint64Ptr != nil {
		n += 1 + sovCasttype(uint64(*m.MyUint64Ptr))
	}
	n += 1 + sovCasttype(uint64(m.MyUint64))
	if m.MyFloat32Ptr != nil {
		n += 5
	}
	n += 5
	if m.MyFloat64Ptr != nil {
		n += 9
	}
	n += 9
	if m.MyBytes != nil {
		l = len(m.MyBytes)
		n += 1 + l + sovCasttype(uint64(l))
	}
	if m.NormalBytes != nil {
		l = len(m.NormalBytes)
		n += 1 + l + sovCasttype(uint64(l))
	}
	if len(m.MyUint64S) > 0 {
		for _, e := range m.MyUint64S {
			n += 1 + sovCasttype(uint64(e))
		}
	}
	if len(m.MyMap) > 0 {
		for k, v := range m.MyMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCasttype(uint64(len(k))) + 1 + sovCasttype(uint64(v))
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if len(m.MyCustomMap) > 0 {
		for k, v := range m.MyCustomMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCasttype(uint64(len(k))) + 1 + sovCasttype(uint64(v))
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if len(m.MyNullableMap) > 0 {
		for k, v := range m.MyNullableMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCasttype(uint64(l))
			}
			mapEntrySize := 1 + sovCasttype(uint64(k)) + l
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if len(m.MyEmbeddedMap) > 0 {
		for k, v := range m.MyEmbeddedMap {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovCasttype(uint64(k)) + 1 + l + sovCasttype(uint64(l))
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Wilson) Size() (n int) {
	var l int
	_ = l
	if m.Int64 != nil {
		n += 1 + sovCasttype(uint64(*m.Int64))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCasttype(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCasttype(x uint64) (n int) {
	return sovCasttype(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Castaway) String() string {
	if this == nil {
		return "nil"
	}
	keysForMyMap := make([]string, 0, len(this.MyMap))
	for k := range this.MyMap {
		keysForMyMap = append(keysForMyMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyMap)
	mapStringForMyMap := "github_com_gogo_protobuf_test_casttype.MyMapType{"
	for _, k := range keysForMyMap {
		mapStringForMyMap += fmt.Sprintf("%v: %v,", k, this.MyMap[k])
	}
	mapStringForMyMap += "}"
	keysForMyCustomMap := make([]string, 0, len(this.MyCustomMap))
	for k := range this.MyCustomMap {
		keysForMyCustomMap = append(keysForMyCustomMap, string(k))
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyCustomMap)
	mapStringForMyCustomMap := "map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type{"
	for _, k := range keysForMyCustomMap {
		mapStringForMyCustomMap += fmt.Sprintf("%v: %v,", k, this.MyCustomMap[github_com_gogo_protobuf_test_casttype.MyStringType(k)])
	}
	mapStringForMyCustomMap += "}"
	keysForMyNullableMap := make([]int32, 0, len(this.MyNullableMap))
	for k := range this.MyNullableMap {
		keysForMyNullableMap = append(keysForMyNullableMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyNullableMap)
	mapStringForMyNullableMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson{"
	for _, k := range keysForMyNullableMap {
		mapStringForMyNullableMap += fmt.Sprintf("%v: %v,", k, this.MyNullableMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyNullableMap += "}"
	keysForMyEmbeddedMap := make([]int32, 0, len(this.MyEmbeddedMap))
	for k := range this.MyEmbeddedMap {
		keysForMyEmbeddedMap = append(keysForMyEmbeddedMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyEmbeddedMap)
	mapStringForMyEmbeddedMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson{"
	for _, k := range keysForMyEmbeddedMap {
		mapStringForMyEmbeddedMap += fmt.Sprintf("%v: %v,", k, this.MyEmbeddedMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyEmbeddedMap += "}"
	s := strings.Join([]string{`&Castaway{`,
		`Int32Ptr:` + valueToStringCasttype(this.Int32Ptr) + `,`,
		`Int32:` + fmt.Sprintf("%v", this.Int32) + `,`,
		`MyUint64Ptr:` + valueToStringCasttype(this.MyUint64Ptr) + `,`,
		`MyUint64:` + fmt.Sprintf("%v", this.MyUint64) + `,`,
		`MyFloat32Ptr:` + valueToStringCasttype(this.MyFloat32Ptr) + `,`,
		`MyFloat32:` + fmt.Sprintf("%v", this.MyFloat32) + `,`,
		`MyFloat64Ptr:` + valueToStringCasttype(this.MyFloat64Ptr) + `,`,
		`MyFloat64:` + fmt.Sprintf("%v", this.MyFloat64) + `,`,
		`MyBytes:` + valueToStringCasttype(this.MyBytes) + `,`,
		`NormalBytes:` + valueToStringCasttype(this.NormalBytes) + `,`,
		`MyUint64S:` + fmt.Sprintf("%v", this.MyUint64S) + `,`,
		`MyMap:` + mapStringForMyMap + `,`,
		`MyCustomMap:` + mapStringForMyCustomMap + `,`,
		`MyNullableMap:` + mapStringForMyNullableMap + `,`,
		`MyEmbeddedMap:` + mapStringForMyEmbeddedMap + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Wilson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Wilson{`,
		`Int64:` + valueToStringCasttype(this.Int64) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCasttype(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Castaway) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Castaway) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int32Ptr != nil {
		data[i] = 0x8
		i++
		i = encodeVarintCasttype(data, i, uint64(*m.Int32Ptr))
	}
	data[i] = 0x10
	i++
	i = encodeVarintCasttype(data, i, uint64(m.Int32))
	if m.MyUint64Ptr != nil {
		data[i] = 0x18
		i++
		i = encodeVarintCasttype(data, i, uint64(*m.MyUint64Ptr))
	}
	data[i] = 0x20
	i++
	i = encodeVarintCasttype(data, i, uint64(m.MyUint64))
	if m.MyFloat32Ptr != nil {
		data[i] = 0x2d
		i++
		i = encodeFixed32Casttype(data, i, uint32(math.Float32bits(float32(*m.MyFloat32Ptr))))
	}
	data[i] = 0x35
	i++
	i = encodeFixed32Casttype(data, i, uint32(math.Float32bits(float32(m.MyFloat32))))
	if m.MyFloat64Ptr != nil {
		data[i] = 0x39
		i++
		i = encodeFixed64Casttype(data, i, uint64(math.Float64bits(float64(*m.MyFloat64Ptr))))
	}
	data[i] = 0x41
	i++
	i = encodeFixed64Casttype(data, i, uint64(math.Float64bits(float64(m.MyFloat64))))
	if m.MyBytes != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintCasttype(data, i, uint64(len(m.MyBytes)))
		i += copy(data[i:], m.MyBytes)
	}
	if m.NormalBytes != nil {
		data[i] = 0x52
		i++
		i = encodeVarintCasttype(data, i, uint64(len(m.NormalBytes)))
		i += copy(data[i:], m.NormalBytes)
	}
	if len(m.MyUint64S) > 0 {
		for _, num := range m.MyUint64S {
			data[i] = 0x58
			i++
			i = encodeVarintCasttype(data, i, uint64(num))
		}
	}
	if len(m.MyMap) > 0 {
		for k := range m.MyMap {
			data[i] = 0x62
			i++
			v := m.MyMap[k]
			mapSize := 1 + len(k) + sovCasttype(uint64(len(k))) + 1 + sovCasttype(uint64(v))
			i = encodeVarintCasttype(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintCasttype(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x10
			i++
			i = encodeVarintCasttype(data, i, uint64(v))
		}
	}
	if len(m.MyCustomMap) > 0 {
		for k := range m.MyCustomMap {
			data[i] = 0x6a
			i++
			v := m.MyCustomMap[k]
			mapSize := 1 + len(k) + sovCasttype(uint64(len(k))) + 1 + sovCasttype(uint64(v))
			i = encodeVarintCasttype(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintCasttype(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x10
			i++
			i = encodeVarintCasttype(data, i, uint64(v))
		}
	}
	if len(m.MyNullableMap) > 0 {
		for k := range m.MyNullableMap {
			data[i] = 0x72
			i++
			v := m.MyNullableMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCasttype(uint64(msgSize))
			}
			mapSize := 1 + sovCasttype(uint64(k)) + msgSize
			i = encodeVarintCasttype(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintCasttype(data, i, uint64(k))
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintCasttype(data, i, uint64(v.Size()))
				n1, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.MyEmbeddedMap) > 0 {
		for k := range m.MyEmbeddedMap {
			data[i] = 0x7a
			i++
			v := m.MyEmbeddedMap[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovCasttype(uint64(msgSize))
			}
			mapSize := 1 + sovCasttype(uint64(k)) + msgSize
			i = encodeVarintCasttype(data, i, uint64(mapSize))
			data[i] = 0x8
			i++
			i = encodeVarintCasttype(data, i, uint64(k))
			data[i] = 0x12
			i++
			i = encodeVarintCasttype(data, i, uint64((&v).Size()))
			n2, err := (&v).MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Wilson) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Wilson) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int64 != nil {
		data[i] = 0x8
		i++
		i = encodeVarintCasttype(data, i, uint64(*m.Int64))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Casttype(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Casttype(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCasttype(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}

func init() { proto.RegisterFile("combos/unsafemarshaler/casttype.proto", fileDescriptorCasttype) }

var fileDescriptorCasttype = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x95, 0xbf, 0x4f, 0xdb, 0x4e,
	0x14, 0xc0, 0x7d, 0x04, 0x83, 0x7d, 0x4e, 0xbe, 0x5f, 0x74, 0xea, 0x60, 0x21, 0xf5, 0x6c, 0x81,
	0xa8, 0x32, 0xb4, 0x09, 0x0a, 0x51, 0x8a, 0x68, 0xd5, 0xc1, 0x88, 0x4a, 0x54, 0x35, 0xaa, 0xdc,
	0x22, 0xd4, 0xaa, 0x8b, 0x03, 0x26, 0x58, 0xf5, 0x8f, 0xc8, 0xbe, 0xb4, 0xf2, 0x86, 0xe8, 0x50,
	0xa9, 0x7f, 0x41, 0xff, 0x84, 0x8e, 0x5d, 0x2a, 0x75, 0xec, 0xc8, 0xc8, 0xd8, 0x29, 0xc1, 0xee,
	0xc2, 0xc8, 0x88, 0x32, 0x55, 0x3e, 0xdb, 0xb1, 0x05, 0xb4, 0x0a, 0x61, 0x8a, 0xcf, 0xf7, 0xde,
	0xe7, 0x7d, 0xee, 0xe5, 0xee, 0x0c, 0x97, 0x76, 0x5d, 0xbb, 0xed, 0xfa, 0xf5, 0x9e, 0xe3, 0xeb,
	0xfb, 0x86, 0xad, 0x7b, 0xfe, 0x81, 0x6e, 0x19, 0x5e, 0x7d, 0x57, 0xf7, 0x09, 0x09, 0xba, 0x46,
	0xad, 0xeb, 0xb9, 0xc4, 0x45, 0x5c, 0x36, 0x9e, 0x7f, 0xd0, 0x31, 0xc9, 0x41, 0xaf, 0x5d, 0xdb,
	0x75, 0xed, 0x7a, 0xc7, 0xed, 0xb8, 0x75, 0x1a, 0xd0, 0xee, 0xed, 0xd3, 0x11, 0x1d, 0xd0, 0xa7,
	0x24, 0x71, 0xe1, 0x4b, 0x05, 0x72, 0xeb, 0xba, 0x4f, 0xf4, 0x0f, 0x7a, 0x80, 0x96, 0x20, 0xb7,
	0xe9, 0x90, 0x95, 0xc6, 0x0b, 0xe2, 0x89, 0x40, 0x06, 0xd5, 0x92, 0xc2, 0x0f, 0xfb, 0x12, 0x6b,
	0xc6, 0xef, 0x34, 0xce, 0x4c, 0xa7, 0xd0, 0x22, 0x64, 0x69, 0x98, 0x38, 0x45, 0x63, 0x2a, 0xc7,
	0x7d, 0x89, 0xc9, 0xe3, 0x92, 0x1f, 0xf4, 0x1a, 0x0a, 0x6a, 0xb0, 0x6d, 0x3a, 0xa4, 0xd5, 0x8c,
	0x71, 0x25, 0x19, 0x54, 0xa7, 0x95, 0x87, 0xc3, 0xbe, 0xb4, 0xf2, 0x57, 0x41, 0x62, 0xf8, 0x24,
	0x5f, 0x58, 0x96, 0xfd, 0x2a, 0xe8, 0x1a, 0x9a, 0x60, 0xe7, 0x2c, 0xb4, 0x03, 0xb9, 0x6c, 0x52,
	0x9c, 0xa6, 0xdc, 0x47, 0xa9, 0xc2, 0x44, 0x6c, 0x2e, 0x63, 0xa3, 0xb7, 0xb0, 0xac, 0x06, 0x4f,
	0x2d, 0x57, 0x4f, 0x7b, 0xc0, 0xca, 0xa0, 0x3a, 0xa5, 0xac, 0x0e, 0xfb, 0x52, 0x73, 0x6c, 0x70,
	0x9a, 0x4e, 0xc9, 0x65, 0xbb, 0x40, 0x43, 0x6f, 0x20, 0x3f, 0x9a, 0x16, 0x67, 0x28, 0xfa, 0x71,
	0xea, 0x3d, 0x19, 0x9e, 0x1f, 0xe1, 0x0b, 0xe6, 0x49, 0xbb, 0x67, 0x65, 0x50, 0x05, 0x93, 0x98,
	0xa7, 0x3d, 0xc9, 0xcc, 0x93, 0x86, 0xe7, 0xe6, 0xad, 0xa6, 0xc8, 0x51, 0xf4, 0x84, 0xe6, 0x29,
	0x9e, 0x1f, 0xe1, 0xd1, 0x33, 0x38, 0xab, 0x06, 0x4a, 0x40, 0x0c, 0x5f, 0xe4, 0x65, 0x50, 0x2d,
	0x2b, 0xcb, 0xc3, 0xbe, 0x74, 0x7f, 0x4c, 0x2a, 0xcd, 0xd3, 0x66, 0xed, 0x04, 0x80, 0x64, 0x28,
	0x6c, 0xb9, 0x9e, 0xad, 0x5b, 0x09, 0x0f, 0xc6, 0x3c, 0x4d, 0x70, 0xf2, 0x57, 0x68, 0x3b, 0x5e,
	0x49, 0xf2, 0x6f, 0xfb, 0xa2, 0x20, 0x97, 0x6e, 0xb3, 0x27, 0xf9, 0x6c, 0xdf, 0xf8, 0xc8, 0x84,
	0xac, 0x1a, 0xa8, 0x7a, 0x57, 0x2c, 0xcb, 0xa5, 0xaa, 0xd0, 0xb8, 0x5b, 0x1b, 0x65, 0x64, 0x67,
	0xab, 0x46, 0xe7, 0x37, 0x1c, 0xe2, 0x05, 0x4a, 0x73, 0xd8, 0x97, 0x96, 0xc7, 0xae, 0xa8, 0xea,
	0x5d, 0x5a, 0x8e, 0xb5, 0xe3, 0x47, 0xf4, 0x1d, 0xc4, 0x07, 0x6b, 0xbd, 0xe7, 0x13, 0xd7, 0x8e,
	0x2b, 0x56, 0x68, 0xc5, 0xc5, 0x6b, 0x2b, 0x8e, 0xa2, 0x92, 0xba, 0xce, 0xd1, 0xe0, 0x06, 0x2b,
	0x7d, 0x49, 0x3c, 0xd3, 0xe9, 0xc4, 0xa5, 0x3f, 0x0f, 0x26, 0x3e, 0xb4, 0x23, 0x03, 0xf4, 0x11,
	0xc0, 0x8a, 0x1a, 0x6c, 0xf5, 0x2c, 0x4b, 0x6f, 0x5b, 0x46, 0x6c, 0xfe, 0x1f, 0x35, 0x5f, 0xba,
	0xd6, 0xbc, 0x10, 0x97, 0xb8, 0xb7, 0x8e, 0x06, 0x52, 0x63, 0x6c, 0x09, 0x7a, 0x3d, 0x51, 0x87,
	0x8a, 0x5d, 0x64, 0xa1, 0x4f, 0xd4, 0x62, 0xc3, 0x6e, 0x1b, 0x7b, 0x7b, 0xc6, 0x5e, 0x6c, 0xf1,
	0xff, 0x3f, 0x2c, 0x0a, 0x71, 0x89, 0xc5, 0x5a, 0xbc, 0xeb, 0x27, 0x37, 0x29, 0xf0, 0xe6, 0x57,
	0x21, 0xcc, 0xb7, 0x04, 0x9a, 0x83, 0xa5, 0x77, 0x46, 0x40, 0x2f, 0x5d, 0x5e, 0x8b, 0x1f, 0xd1,
	0x1d, 0xc8, 0xbe, 0xd7, 0xad, 0x9e, 0x41, 0x2f, 0xd9, 0x69, 0x2d, 0x19, 0xac, 0x4d, 0xad, 0x82,
	0xf9, 0x27, 0x70, 0xee, 0xf2, 0x5f, 0x7b, 0xa3, 0x7c, 0x0d, 0xa2, 0xab, 0x0d, 0x2e, 0x12, 0xd8,
	0x84, 0x70, 0xaf, 0x48, 0x10, 0x1a, 0x73, 0x79, 0x8b, 0x76, 0x4c, 0xcb, 0x77, 0x9d, 0x2b, 0xcc,
	0xcb, 0xed, 0xba, 0x1d, 0x73, 0x01, 0xc3, 0x99, 0xe4, 0x65, 0xbc, 0x96, 0x4d, 0x7a, 0xdb, 0xd3,
	0x8f, 0x12, 0xfd, 0xc2, 0xb4, 0x9a, 0xca, 0xf3, 0xe3, 0x10, 0x33, 0x27, 0x21, 0x66, 0x7e, 0x85,
	0x98, 0x39, 0x0d, 0x31, 0x38, 0x0b, 0x31, 0x38, 0x0f, 0x31, 0xb8, 0x08, 0x31, 0x38, 0x8c, 0x30,
	0xf8, 0x1a, 0x61, 0xf0, 0x2d, 0xc2, 0xe0, 0x47, 0x84, 0xc1, 0xcf, 0x08, 0x83, 0xe3, 0x08, 0x33,
	0x27, 0x11, 0x66, 0x4e, 0x23, 0x0c, 0xce, 0x22, 0xcc, 0x9c, 0x47, 0x18, 0x5c, 0x44, 0x18, 0x1c,
	0xfe, 0xc6, 0xcc, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xe5, 0x25, 0x59, 0x69, 0x07, 0x00,
	0x00,
}
