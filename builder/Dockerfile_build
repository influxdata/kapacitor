FROM ubuntu:20.04

# This builder image is base image for building Kapacitor binaries.
# It is used by the CI/CD pipeline to use same version of Go, Protobuf and other dependencies.

MAINTAINER support@influxdb.com

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get -qq update && apt-get -qq install -y \
    autoconf \
    automake \
    clang \
    gcc \
    gcc-aarch64-linux-gnu \
    git \
    libtool \
    llvm-dev \
    lzma-dev \
    mingw-w64 \
    mercurial \
    make \
    pkg-config \
    python \
    python-setuptools \
    python3 \
    python3-setuptools \
    python3-boto \
    ruby \
    ruby-dev \
    rpm \
    software-properties-common \
    unzip \
    wget \
    zip

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 10

# Remove `gem install dotenv -v 2.8.1` once the base image will support Ruby v3.
RUN gem install dotenv -v 2.8.1
RUN gem install fpm

#
# Install GoLang
#
# src: https://github.com/influxdata/chronograf/blob/9c4b1aa1a458ed86716985ed93783c35cc6411a7/etc/Dockerfile_build#L35
#
ENV GOPATH=/root/go
ENV GO_VERSION=1.22.7
ENV GO_ARCH=amd64
ENV GO111MODULES=ON
RUN wget https://golang.org/dl/go${GO_VERSION}.linux-${GO_ARCH}.tar.gz; \
    tar -C /usr/local/ -xf /go${GO_VERSION}.linux-${GO_ARCH}.tar.gz ; \
    rm /go${GO_VERSION}.linux-${GO_ARCH}.tar.gz
ENV PATH=/usr/local/go/bin:$PATH
ENV PATH=$GOPATH/bin:$PATH

#
# Install Rust
#
# src: https://github.com/influxdata/edge/blob/4677c285014ac27727e5a1ae9bf2c1633afc6ea6/dockerfiles/cross-builder/install-rust.sh#L7
#
ENV RUST_LATEST_VERSION=1.63.0
# For security, we specify a particular rustup version and a SHA256 hash, computed
# ourselves and hardcoded here. When updating `RUSTUP_LATEST_VERSION`:
#   1. Download the new rustup script from https://github.com/rust-lang/rustup/releases.
#   2. Audit the script and changes to it. You might want to grep for strange URLs...
#   3. Update `OUR_RUSTUP_SHA` with the result of running `sha256sum rustup-init.sh`.
ENV RUSTUP_LATEST_VERSION=1.25.1
ENV OUR_RUSTUP_SHA="173f4881e2de99ba9ad1acb59e65be01b2a44979d83b6ec648d0d22f8654cbce"
# Download rustup script
RUN wget https://raw.githubusercontent.com/rust-lang/rustup/${RUSTUP_LATEST_VERSION}/rustup-init.sh
# Verify checksum of rustup script. Exit with error if check fails.
RUN echo "${OUR_RUSTUP_SHA} rustup-init.sh" | sha256sum --check -- \
    || { echo "Checksum problem!"; exit 1; }
# Run rustup
RUN sh rustup-init.sh --default-toolchain "$RUST_LATEST_VERSION" -y
# Ensure cargo is runnable
RUN . $HOME/.cargo/env && cargo help
RUN . $HOME/.cargo/env && rustup target add \
        aarch64-unknown-linux-musl \
        x86_64-apple-darwin \
        x86_64-pc-windows-gnu \
        x86_64-unknown-linux-musl
ENV PATH=/root/.cargo/bin:${PATH}

#
# src: https://github.com/influxdata/edge/blob/4677c285014ac27727e5a1ae9bf2c1633afc6ea6/dockerfiles/cross-builder/Dockerfile#L53
#
COPY fs/ /

RUN git clone git://git.musl-libc.org/musl /tmp/musl \
      --branch v1.2.3 --depth 1

# Enable "-static-pie" Compiler Flag
RUN patch /tmp/musl/tools/musl-gcc.specs.sh \
          /usr/local/src/musl-gcc/musl-gcc.specs.sh.patch

#
# Build MUSL AMD64 Compiler
#
# src: https://github.com/influxdata/edge/blob/4677c285014ac27727e5a1ae9bf2c1633afc6ea6/dockerfiles/cross-builder/Dockerfile#L62
#
RUN cd /tmp/musl                 && \
    export CC=gcc                && \
    export AR=ar                 && \
    export RANLIB=ranlib         && \
    ./configure                     \
      --enable-wrapper=gcc          \
      --prefix=/musl/x86_64         \
      --target=x86_64-linux-musl && \
    make -j"$(nprocs)" install   && \
    make clean
# BUILD MUSL ARM64 Compiler
RUN cd /tmp/musl                           && \
    export CC=aarch64-linux-gnu-gcc        && \
    export AR=aarch64-linux-gnu-ar         && \
    export RANLIB=aarch64-linux-gnu-ranlib && \
    ./configure                               \
      --enable-wrapper=gcc                    \
      --prefix=/musl/aarch64                  \
      --target=aarch64-linux-musl          && \
    make -j"$(nprocs)" install             && \
    make clean

#
# Install osxcross
#
# src: https://github.com/influxdata/edge/blob/cb1343dd74ecba8ec07fe810195530a0b9055aa9/dockerfiles/cross-builder/Dockerfile#L85
#
ENV OSXCROSS_VERSION=5771a847950abefed9a37e2d16ee10e0dd90c641
ENV OSXCROSS_BUILD_TIME=20220412215428
RUN OSXCROSS_ARCHIVE=osxcross-${OSXCROSS_VERSION}-${OSXCROSS_BUILD_TIME}.tar.gz && \
    wget https://edge-xcc-archives.s3-us-west-2.amazonaws.com/${OSXCROSS_ARCHIVE} && \
    tar xzf ${OSXCROSS_ARCHIVE} -C /usr/local && \
    rm ${OSXCROSS_ARCHIVE}
ENV PATH=/usr/local/osxcross/target/bin:${PATH}

#
# Install protobuf3 runtime and protoc binary
#
# src: https://github.com/influxdata/edge/blob/cb1343dd74ecba8ec07fe810195530a0b9055aa9/dockerfiles/cross-builder/Dockerfile#L93
#
# NOTE: PROTO_VERSION env var can be overridden to install a different version
ARG PROTO_VERSION=3.17.3
ENV PROTO_VERSION=${PROTO_VERSION}
ENV PROTO_BUILD_TIME=2021100120071633118879
RUN PROTO_ARCHIVE=protoc-${PROTO_VERSION}-${PROTO_BUILD_TIME}.tar.gz && \
    wget https://edge-xcc-archives.s3-us-west-2.amazonaws.com/${PROTO_ARCHIVE} && \
    tar xzf ${PROTO_ARCHIVE} -C /usr && \
    rm ${PROTO_ARCHIVE}

#
# Install pkg-config
#
# src: https://github.com/influxdata/edge/blob/4677c285014ac27727e5a1ae9bf2c1633afc6ea6/dockerfiles/cross-builder/Dockerfile#L104
#
RUN go install github.com/influxdata/pkg-config@v0.2.11

# Configure local git
RUN git config --global user.email "support@influxdb.com"
RUN git config --global user.Name "Docker Builder"

