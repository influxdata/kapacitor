# CircleCI 2.0 configuration
version:  "2.1"

commands:
      deploy_release_packages:
            description:  >
                  This will build and publish release packages for tag "$CIRCLE_TAG"
            steps:
                  - run:
                        name: Deploy Release Packages
                        command:  |
                              GHR_VERSION=v0.14.0
                              wget https://github.com/tcnksm/ghr/releases/download/${GHR_VERSION}/ghr_${GHR_VERSION}_linux_amd64.tar.gz
                              tar -xzf ghr_${GHR_VERSION}_linux_amd64.tar.gz
                              ./build.sh --debug --clean --generate --package --package-udfs --upload --bucket=dl.influxdata.com/kapacitor/releases --platform=all --arch=all --release
                              ./ghr_${GHR_VERSION}_linux_amd64/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -replace ${CIRCLE_TAG} ./build/

      run_tests:
            description:  >
                  This will run Kapacitor Tests
            steps:
                  - run:
                        name: Running Kapacitor Tests
                        no_output_timeout: 30m
                        command:  |
                              mkdir -p /go
                              ./circle-test.sh
      deploy_nightly:
            description:  >
                    This will build and publish nightly releases
            steps:
                  - run:
                        name: Deploy Nightly Build
                        command:  |
                                ./build.sh --debug --clean --generate --package --package-udfs --upload --bucket=dl.influxdata.com/kapacitor/releases/nightly --platform=all --arch=all --nightly

jobs:
      build:
            docker:
                  - image: nathanielc/docker-client
            parallelism: 2
            resource_class: large
            working_directory: ~/kapacitor
            steps:
                  - checkout
                  - restore_cache: # restores saved cache if no changes are detected since last run
                        keys:
                              - v0-go-mod-{{ checksum "go.sum" }}
                              - v0-go-mod-
                  - setup_remote_docker:
                        docker_layer_caching: true
                  - run_tests
                  - save_cache:
                          key: v0-go-mod-{{ checksum "go.sum" }}
                          paths:
                                - "/go/pkg/mod"

      release:
            docker:
                  - image: nathanielc/docker-client
            working_directory: ~/kapacitor
            resource_class: large
            steps:
                  - checkout
                  - restore_cache: # restores saved cache if no changes are detected since last run
                        keys:
                              - v0-go-mod-{{ checksum "go.sum" }}
                              - v0-go-mod-
                  - setup_remote_docker:
                        docker_layer_caching: true
                  - deploy_release_packages
                  - save_cache:
                          key: v0-go-mod-{{ checksum "go.sum" }}
                          paths:
                                - "/go/pkg/mod"

      nightly-build:
            docker:
                  - image: nathanielc/docker-client
            working_directory: ~/kapacitor
            steps:
                  - checkout
                  - restore_cache: # restores saved cache if no changes are detected since last run
                        keys:
                              - v0-go-mod-{{ checksum "go.sum" }}
                              - v0-go-mod-
                  - setup_remote_docker:
                          docker_layer_caching: true
                  - run_tests
                  - save_cache:
                        key: v0-go-mod-{{ checksum "go.sum" }}
                        paths:
                              - "/go/pkg/mod"
                  - deploy_nightly


workflows:
      version:  2
      build-and-deploy:
            jobs:
                  - build:
                        filters:
                              tags:
                                    only: /.*/
                  - release:
                        requires:
                              - build
                        filters:
                              tags:
                                    only:  /^v[0-9]+(\.[0-9]+){2}(-(rc|beta|test)[0-9]+)?/
                              branches:
                                    ignore:  /.*/

      nightly:
            triggers:
                  - schedule:
                          cron: "0 3 * * *" #3AM UTC daily
                          filters:
                                branches:
                                      only:
                                            - master
            jobs:
                  - nightly-build