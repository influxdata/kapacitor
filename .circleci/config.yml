# CircleCI 2.0 configuration
version:  "2.1"

executors:
  cross-builder:
    docker:
      # NOTE: To upgrade the Go version, first push the upgrade to the cross-builder Dockerfile in the edge repo,
      # then update the version here to match. Until we finish the migration to using the cross-builder image,
      # you'll also need to update references to `cimg/go` and `GO_VERSION` in this file.
      - image: quay.io/influxdb/cross-builder:go1.20.13-latest
    resource_class: large
  linux-amd64:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
      resource_class: large

commands:
  install_dependencies:
    description: >
      Install additional dependencies for python script
    steps:
      - run:
          name: Install additional dependencies
          command: |
            set -x
            # APT packages
            apt-get -qq update && apt-get -qq install -y \
                software-properties-common \
                unzip \
                mercurial \
                make \
                ruby \
                ruby-dev \
                rpm \
                zip \
                python \
                python-setuptools \
                python3 \
                python3-setuptools \
                python3-boto \
                autoconf \
                automake \
                libtool

            # Ruby dependencies
            gem install fpm

            # Protobuf
            wget -q https://github.com/google/protobuf/releases/download/v${PROTO_VERSION}/protobuf-python-${PROTO_VERSION}.tar.gz
            tar -xf protobuf-python-${PROTO_VERSION}.tar.gz --no-same-owner
            cd protobuf-${PROTO_VERSION}/python
            python2 setup.py install
            python3 setup.py install
            cd ../../
            rm -rf protobuf-${PROTO_VERSION} protobuf-python-${PROTO_VERSION}.tar.gz
  deploy_release_packages:
    description:  >
      This will build and publish release packages for tag "$CIRCLE_TAG"
    steps:
      - run: |
          ./build.py --debug --clean --generate --package --package-udfs --platform=all --arch=all --checksum --release --version "${CIRCLE_TAG}"
      - persist_to_workspace:
          root: .
          paths:
            - build
      - store_artifacts:
          path: ./build

  run_tests:
    description:  >
      This will run Kapacitor Tests
    steps:
      - run:
          name: Running Kapacitor Tests
          no_output_timeout: 30m
          command:  |
            ./build.py --test --generate --parallel=1 --timeout=1000s --verbose
  deploy_nightly:
    description:  >
      This will build and publish nightly releases
    steps:
      - run:
          name: Deploy Nightly Build
          command:  |
            ./build.py --debug --clean --generate --package --package-udfs --upload --bucket=dl.influxdata.com/kapacitor/releases/nightly --platform=all --arch=all --nightly

jobs:
  build:
    executor: cross-builder
    parallelism: 2
    working_directory: ~/kapacitor
    steps:
      - checkout
      - install_dependencies
      - run_tests

  static_code_checks:
    executor: cross-builder
    working_directory: ~/kapacitor
    steps:
      - checkout
      - run:
          name: checkfmt
          command: ./checkfmt.sh
      - run:
          name: generate
          command: ./generate.sh
      - run:
          name: go vet
          command: go vet ./...
      - run:
          name: staticcheck
          command:  go run honnef.co/go/tools/cmd/staticcheck ./...

  release:
    executor: cross-builder
    working_directory: ~/kapacitor
    steps:
      - checkout
      - install_dependencies
      - deploy_release_packages

  release-sign:
    circleci_ip_ranges: true
    docker:
      - image: quay.io/influxdb/rsign:latest
        auth:
          username: $QUAY_RSIGN_USERNAME
          password: $QUAY_RSIGN_PASSWORD
    steps:
      - add_ssh_keys:
          fingerprints:
            - d6:7d:a0:50:12:3c:de:70:1d:7e:ed:d7:37:81:f9:b8
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          find /tmp/workspace/build -type f -exec rsign '{}' \; -exec sh -c '
            # Since all artifacts are present, sign them here. This saves Circle
            # credits over spinning up another instance just to separate out the
            # checksum job.
            sha256sum "{}" >> "/tmp/workspace/build/kapacitor.${CIRCLE_TAG}.digests"
          ' \;
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - build
      - store_artifacts:
          path: /tmp/workspace/build


  nightly-build:
    executor: cross-builder
    working_directory: ~/kapacitor
    steps:
      - checkout
      - install_dependencies
      - run_tests
      - deploy_nightly

  changelog:
    docker:
      - image: quay.io/influxdb/changelogger:49956d24b2812ff1866f5870c18572f0344abf1b
    steps:
      - checkout
      - run:
          name: Generate changelog
          command: |
            mkdir changelog_artifacts
            echo "CHANGELOG for Kapacitor << pipeline.git.branch >> commit ${CIRCLE_SHA1}" > changelog_artifacts/CHANGELOG.md
            build-simple-changelog.sh HEAD v1.5.9 >> changelog_artifacts/CHANGELOG.md
            cat ./scripts/CHANGELOG_frozen.md >> changelog_artifacts/CHANGELOG.md
            #TODO: delete contents of CHANGELOG.md in repo root and replace with link to changelog in S3
      - store_artifacts:
          path: changelog_artifacts/
      - persist_to_workspace:
          root: .
          paths:
            - changelog_artifacts

  release-upload:
    parameters:
      release_type:
        type: string
    docker:
      - image: ubuntu:latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install --yes awscli

          case "<< parameters.release_type >>" in
            nightly)
              find /tmp/workspace/build -type f -exec aws s3 cp "{}" s3://dl.influxdata.com/kapacitor/nightlies/ \;
              ;;
            release)
              find /tmp/workspace/build -type f -exec aws s3 cp "{}" s3://dl.influxdata.com/kapacitor/releases/ \;
              ;;
          esac

  s3-publish-changelog:
    parameters:
      release_type:
        type: string
    docker:
      - image: ubuntu:latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Publish CHANGELOG.md to S3
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install --yes awscli

            pushd /tmp/workspace/changelog_artifacts/

            case "<< parameters.release_type >>" in
              nightly)
                aws s3 cp CHANGELOG.md "s3://dl.influxdata.com/kapacitor/nightlies/CHANGELOG.md"
                ;;
              release)
                aws s3 cp CHANGELOG.md "s3://dl.influxdata.com/kapacitor/releases/CHANGELOG.<< pipeline.git.tag >>.md"
                ;;
            esac

release_filter: &release_filter
  filters:
    tags:
      only:
        - /.*test/
        - /^v[0-9]+(\.[0-9]+){2}(-(rc|beta)[0-9]+)?/
    branches:
      ignore:  /.*/

any_filter: &any_filter
  filters:
    tags:
      only: /.*/
    branches:
      only: /.*/

workflows:
  version:  2
  build-and-deploy:
    jobs:
      - build:
          <<: *any_filter
      - release:
          <<: *release_filter
      - release-sign:
          <<: *release_filter
          requires:
            - release
      - release-upload:
          <<: *release_filter
          release_type: release
          requires:
            - build
            - release
            - release-sign
      - static_code_checks:
          <<: *any_filter
      - changelog:
          <<: *any_filter
      - s3-publish-changelog:
          <<: *release_filter
          release_type: release
          requires:
            - changelog
  nightly:
    triggers:
      - schedule:
          cron: "0 3 * * *" #3AM UTC daily
          filters:
            branches:
              only:
                - master
    jobs:
      - nightly-build
      - changelog
      - s3-publish-changelog:
          release_type: nightly
          requires:
            - changelog
